// Code generated by protoc-gen-go.
// source: hyperstart.proto
// DO NOT EDIT!

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	hyperstart.proto
	oci.proto

It has these top-level messages:
	CreateContainerRequest
	StartContainerRequest
	ExecProcessRequest
	SignalProcessRequest
	WaitProcessRequest
	WaitProcessResponse
	WriteStreamRequest
	WriteStreamResponse
	ReadStreamRequest
	ReadStreamResponse
	CloseStdinRequest
	TtyWinResizeRequest
	CreateSandboxRequest
	DestroySandboxRequest
	IpAddress
	UpdateInterfaceRequest
	AddRouteRequest
	OnlineCPUMemRequest
	Storage
	StringUser
	Route
	EventsRequest
	ContainerTermination
	ProcessTermination
	Event
	Spec
	Process
	Box
	User
	LinuxCapabilities
	POSIXRlimit
	Mount
	Root
	Hooks
	Hook
	Linux
	Windows
	Solaris
	LinuxIDMapping
	LinuxNamespace
	LinuxDevice
	LinuxResources
	LinuxMemory
	LinuxCPU
	LinuxWeightDevice
	LinuxThrottleDevice
	LinuxBlockIO
	LinuxPids
	LinuxDeviceCgroup
	LinuxNetwork
	LinuxHugepageLimit
	LinuxInterfacePriority
	LinuxSeccomp
	LinuxSeccompArg
	LinuxSyscall
	LinuxIntelRdt
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateContainerRequest struct {
	ContainerId string      `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	StringUser  *StringUser `protobuf:"bytes,2,opt,name=string_user,json=stringUser" json:"string_user,omitempty"`
	Storages    []*Storage  `protobuf:"bytes,3,rep,name=storages" json:"storages,omitempty"`
	OCI         *Spec       `protobuf:"bytes,4,opt,name=OCI" json:"OCI,omitempty"`
}

func (m *CreateContainerRequest) Reset()                    { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()               {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateContainerRequest) GetStringUser() *StringUser {
	if m != nil {
		return m.StringUser
	}
	return nil
}

func (m *CreateContainerRequest) GetStorages() []*Storage {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *CreateContainerRequest) GetOCI() *Spec {
	if m != nil {
		return m.OCI
	}
	return nil
}

type StartContainerRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *StartContainerRequest) Reset()                    { *m = StartContainerRequest{} }
func (m *StartContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*StartContainerRequest) ProtoMessage()               {}
func (*StartContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExecProcessRequest struct {
	ContainerId string      `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	StringUser  *StringUser `protobuf:"bytes,2,opt,name=string_user,json=stringUser" json:"string_user,omitempty"`
	Process     *Process    `protobuf:"bytes,3,opt,name=process" json:"process,omitempty"`
}

func (m *ExecProcessRequest) Reset()                    { *m = ExecProcessRequest{} }
func (m *ExecProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecProcessRequest) ProtoMessage()               {}
func (*ExecProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExecProcessRequest) GetStringUser() *StringUser {
	if m != nil {
		return m.StringUser
	}
	return nil
}

func (m *ExecProcessRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type SignalProcessRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Signal      uint32 `protobuf:"varint,3,opt,name=signal" json:"signal,omitempty"`
}

func (m *SignalProcessRequest) Reset()                    { *m = SignalProcessRequest{} }
func (m *SignalProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*SignalProcessRequest) ProtoMessage()               {}
func (*SignalProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type WaitProcessRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
}

func (m *WaitProcessRequest) Reset()                    { *m = WaitProcessRequest{} }
func (m *WaitProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitProcessRequest) ProtoMessage()               {}
func (*WaitProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type WaitProcessResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *WaitProcessResponse) Reset()                    { *m = WaitProcessResponse{} }
func (m *WaitProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitProcessResponse) ProtoMessage()               {}
func (*WaitProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type WriteStreamRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteStreamRequest) Reset()                    { *m = WriteStreamRequest{} }
func (m *WriteStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamRequest) ProtoMessage()               {}
func (*WriteStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type WriteStreamResponse struct {
	Len uint32 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
}

func (m *WriteStreamResponse) Reset()                    { *m = WriteStreamResponse{} }
func (m *WriteStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamResponse) ProtoMessage()               {}
func (*WriteStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ReadStreamRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Len         uint32 `protobuf:"varint,3,opt,name=len" json:"len,omitempty"`
}

func (m *ReadStreamRequest) Reset()                    { *m = ReadStreamRequest{} }
func (m *ReadStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamRequest) ProtoMessage()               {}
func (*ReadStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ReadStreamResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadStreamResponse) Reset()                    { *m = ReadStreamResponse{} }
func (m *ReadStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamResponse) ProtoMessage()               {}
func (*ReadStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CloseStdinRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
}

func (m *CloseStdinRequest) Reset()                    { *m = CloseStdinRequest{} }
func (m *CloseStdinRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseStdinRequest) ProtoMessage()               {}
func (*CloseStdinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type TtyWinResizeRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Row         uint32 `protobuf:"varint,3,opt,name=row" json:"row,omitempty"`
	Column      uint32 `protobuf:"varint,4,opt,name=column" json:"column,omitempty"`
}

func (m *TtyWinResizeRequest) Reset()                    { *m = TtyWinResizeRequest{} }
func (m *TtyWinResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*TtyWinResizeRequest) ProtoMessage()               {}
func (*TtyWinResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CreateSandboxRequest struct {
	Hostname string     `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Dns      []string   `protobuf:"bytes,2,rep,name=dns" json:"dns,omitempty"`
	Storages []*Storage `protobuf:"bytes,3,rep,name=storages" json:"storages,omitempty"`
}

func (m *CreateSandboxRequest) Reset()                    { *m = CreateSandboxRequest{} }
func (m *CreateSandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSandboxRequest) ProtoMessage()               {}
func (*CreateSandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateSandboxRequest) GetStorages() []*Storage {
	if m != nil {
		return m.Storages
	}
	return nil
}

type DestroySandboxRequest struct {
}

func (m *DestroySandboxRequest) Reset()                    { *m = DestroySandboxRequest{} }
func (m *DestroySandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroySandboxRequest) ProtoMessage()               {}
func (*DestroySandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type IpAddress struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Mask    string `protobuf:"bytes,2,opt,name=mask" json:"mask,omitempty"`
}

func (m *IpAddress) Reset()                    { *m = IpAddress{} }
func (m *IpAddress) String() string            { return proto.CompactTextString(m) }
func (*IpAddress) ProtoMessage()               {}
func (*IpAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type UpdateInterfaceRequest struct {
	Type        uint64       `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Device      string       `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	NewName     string       `protobuf:"bytes,3,opt,name=newName" json:"newName,omitempty"`
	IpAddresses []*IpAddress `protobuf:"bytes,4,rep,name=ipAddresses" json:"ipAddresses,omitempty"`
	Mtu         uint64       `protobuf:"varint,5,opt,name=mtu" json:"mtu,omitempty"`
}

func (m *UpdateInterfaceRequest) Reset()                    { *m = UpdateInterfaceRequest{} }
func (m *UpdateInterfaceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateInterfaceRequest) ProtoMessage()               {}
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateInterfaceRequest) GetIpAddresses() []*IpAddress {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

type AddRouteRequest struct {
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *AddRouteRequest) Reset()                    { *m = AddRouteRequest{} }
func (m *AddRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRouteRequest) ProtoMessage()               {}
func (*AddRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AddRouteRequest) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type OnlineCPUMemRequest struct {
}

func (m *OnlineCPUMemRequest) Reset()                    { *m = OnlineCPUMemRequest{} }
func (m *OnlineCPUMemRequest) String() string            { return proto.CompactTextString(m) }
func (*OnlineCPUMemRequest) ProtoMessage()               {}
func (*OnlineCPUMemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Storage struct {
	Driver     string   `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Fstype     string   `protobuf:"bytes,3,opt,name=fstype" json:"fstype,omitempty"`
	Options    []string `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
	MountPoint string   `protobuf:"bytes,5,opt,name=mount_point,json=mountPoint" json:"mount_point,omitempty"`
}

func (m *Storage) Reset()                    { *m = Storage{} }
func (m *Storage) String() string            { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()               {}
func (*Storage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type StringUser struct {
	Uid            string   `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Gid            string   `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	AdditionalGids []string `protobuf:"bytes,3,rep,name=additionalGids" json:"additionalGids,omitempty"`
}

func (m *StringUser) Reset()                    { *m = StringUser{} }
func (m *StringUser) String() string            { return proto.CompactTextString(m) }
func (*StringUser) ProtoMessage()               {}
func (*StringUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type Route struct {
	Dest    string `protobuf:"bytes,1,opt,name=dest" json:"dest,omitempty"`
	Gateway string `protobuf:"bytes,2,opt,name=gateway" json:"gateway,omitempty"`
	Device  string `protobuf:"bytes,3,opt,name=device" json:"device,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type EventsRequest struct {
	ContainerId string                      `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ProcessId   string                      `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Timestamp   *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *EventsRequest) Reset()                    { *m = EventsRequest{} }
func (m *EventsRequest) String() string            { return proto.CompactTextString(m) }
func (*EventsRequest) ProtoMessage()               {}
func (*EventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EventsRequest) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type ContainerTermination struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	ExitCode    int32  `protobuf:"varint,2,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
}

func (m *ContainerTermination) Reset()                    { *m = ContainerTermination{} }
func (m *ContainerTermination) String() string            { return proto.CompactTextString(m) }
func (*ContainerTermination) ProtoMessage()               {}
func (*ContainerTermination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type ProcessTermination struct {
	ProcessId string `protobuf:"bytes,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	ExitCode  int32  `protobuf:"varint,2,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
}

func (m *ProcessTermination) Reset()                    { *m = ProcessTermination{} }
func (m *ProcessTermination) String() string            { return proto.CompactTextString(m) }
func (*ProcessTermination) ProtoMessage()               {}
func (*ProcessTermination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type Event struct {
	// Types that are valid to be assigned to Event:
	//	*Event_ContainerTermination
	//	*Event_ProcessTermination
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type isEvent_Event interface {
	isEvent_Event()
}

type Event_ContainerTermination struct {
	ContainerTermination *ContainerTermination `protobuf:"bytes,1,opt,name=container_termination,json=containerTermination,oneof"`
}
type Event_ProcessTermination struct {
	ProcessTermination *ProcessTermination `protobuf:"bytes,2,opt,name=process_termination,json=processTermination,oneof"`
}

func (*Event_ContainerTermination) isEvent_Event() {}
func (*Event_ProcessTermination) isEvent_Event()   {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetContainerTermination() *ContainerTermination {
	if x, ok := m.GetEvent().(*Event_ContainerTermination); ok {
		return x.ContainerTermination
	}
	return nil
}

func (m *Event) GetProcessTermination() *ProcessTermination {
	if x, ok := m.GetEvent().(*Event_ProcessTermination); ok {
		return x.ProcessTermination
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_ContainerTermination)(nil),
		(*Event_ProcessTermination)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_ContainerTermination:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContainerTermination); err != nil {
			return err
		}
	case *Event_ProcessTermination:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcessTermination); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // event.container_termination
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContainerTermination)
		err := b.DecodeMessage(msg)
		m.Event = &Event_ContainerTermination{msg}
		return true, err
	case 2: // event.process_termination
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcessTermination)
		err := b.DecodeMessage(msg)
		m.Event = &Event_ProcessTermination{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_ContainerTermination:
		s := proto.Size(x.ContainerTermination)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ProcessTermination:
		s := proto.Size(x.ProcessTermination)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*CreateContainerRequest)(nil), "grpc.CreateContainerRequest")
	proto.RegisterType((*StartContainerRequest)(nil), "grpc.StartContainerRequest")
	proto.RegisterType((*ExecProcessRequest)(nil), "grpc.ExecProcessRequest")
	proto.RegisterType((*SignalProcessRequest)(nil), "grpc.SignalProcessRequest")
	proto.RegisterType((*WaitProcessRequest)(nil), "grpc.WaitProcessRequest")
	proto.RegisterType((*WaitProcessResponse)(nil), "grpc.WaitProcessResponse")
	proto.RegisterType((*WriteStreamRequest)(nil), "grpc.WriteStreamRequest")
	proto.RegisterType((*WriteStreamResponse)(nil), "grpc.WriteStreamResponse")
	proto.RegisterType((*ReadStreamRequest)(nil), "grpc.ReadStreamRequest")
	proto.RegisterType((*ReadStreamResponse)(nil), "grpc.ReadStreamResponse")
	proto.RegisterType((*CloseStdinRequest)(nil), "grpc.CloseStdinRequest")
	proto.RegisterType((*TtyWinResizeRequest)(nil), "grpc.TtyWinResizeRequest")
	proto.RegisterType((*CreateSandboxRequest)(nil), "grpc.CreateSandboxRequest")
	proto.RegisterType((*DestroySandboxRequest)(nil), "grpc.DestroySandboxRequest")
	proto.RegisterType((*IpAddress)(nil), "grpc.IpAddress")
	proto.RegisterType((*UpdateInterfaceRequest)(nil), "grpc.UpdateInterfaceRequest")
	proto.RegisterType((*AddRouteRequest)(nil), "grpc.AddRouteRequest")
	proto.RegisterType((*OnlineCPUMemRequest)(nil), "grpc.OnlineCPUMemRequest")
	proto.RegisterType((*Storage)(nil), "grpc.Storage")
	proto.RegisterType((*StringUser)(nil), "grpc.StringUser")
	proto.RegisterType((*Route)(nil), "grpc.Route")
	proto.RegisterType((*EventsRequest)(nil), "grpc.EventsRequest")
	proto.RegisterType((*ContainerTermination)(nil), "grpc.ContainerTermination")
	proto.RegisterType((*ProcessTermination)(nil), "grpc.ProcessTermination")
	proto.RegisterType((*Event)(nil), "grpc.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for HyperstartService service

type HyperstartServiceClient interface {
	// execution
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ExecProcess(ctx context.Context, in *ExecProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	// stdio
	WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc1.CallOption) (*WriteStreamResponse, error)
	ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error)
	ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error)
	CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	// events
	GetEvents(ctx context.Context, in *EventsRequest, opts ...grpc1.CallOption) (HyperstartService_GetEventsClient, error)
}

type hyperstartServiceClient struct {
	cc *grpc1.ClientConn
}

func NewHyperstartServiceClient(cc *grpc1.ClientConn) HyperstartServiceClient {
	return &hyperstartServiceClient{cc}
}

func (c *hyperstartServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CreateContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/StartContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ExecProcess(ctx context.Context, in *ExecProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ExecProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/SignalProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc1.CallOption) (*WriteStreamResponse, error) {
	out := new(WriteStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/WriteStdin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ReadStdout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ReadStderr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CloseStdin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/TtyWinResize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CreateSandbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/DestroySandbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/UpdateInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/AddRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/OnlineCPUMem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) GetEvents(ctx context.Context, in *EventsRequest, opts ...grpc1.CallOption) (HyperstartService_GetEventsClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_HyperstartService_serviceDesc.Streams[0], c.cc, "/grpc.HyperstartService/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperstartServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HyperstartService_GetEventsClient interface {
	Recv() (*Event, error)
	grpc1.ClientStream
}

type hyperstartServiceGetEventsClient struct {
	grpc1.ClientStream
}

func (x *hyperstartServiceGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HyperstartService service

type HyperstartServiceServer interface {
	// execution
	CreateContainer(context.Context, *CreateContainerRequest) (*google_protobuf.Empty, error)
	StartContainer(context.Context, *StartContainerRequest) (*google_protobuf.Empty, error)
	ExecProcess(context.Context, *ExecProcessRequest) (*google_protobuf.Empty, error)
	SignalProcess(context.Context, *SignalProcessRequest) (*google_protobuf.Empty, error)
	// stdio
	WriteStdin(context.Context, *WriteStreamRequest) (*WriteStreamResponse, error)
	ReadStdout(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	ReadStderr(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	CloseStdin(context.Context, *CloseStdinRequest) (*google_protobuf.Empty, error)
	TtyWinResize(context.Context, *TtyWinResizeRequest) (*google_protobuf.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	CreateSandbox(context.Context, *CreateSandboxRequest) (*google_protobuf.Empty, error)
	DestroySandbox(context.Context, *DestroySandboxRequest) (*google_protobuf.Empty, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*google_protobuf.Empty, error)
	AddRoute(context.Context, *AddRouteRequest) (*google_protobuf.Empty, error)
	OnlineCPUMem(context.Context, *OnlineCPUMemRequest) (*google_protobuf.Empty, error)
	// events
	GetEvents(*EventsRequest, HyperstartService_GetEventsServer) error
}

func RegisterHyperstartServiceServer(s *grpc1.Server, srv HyperstartServiceServer) {
	s.RegisterService(&_HyperstartService_serviceDesc, srv)
}

func _HyperstartService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).StartContainer(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ExecProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ExecProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ExecProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ExecProcess(ctx, req.(*ExecProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).SignalProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_WriteStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).WriteStdin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/WriteStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).WriteStdin(ctx, req.(*WriteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ReadStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ReadStdout(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ReadStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ReadStdout(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ReadStderr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ReadStderr(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ReadStderr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ReadStderr(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_CloseStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStdinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CloseStdin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CloseStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CloseStdin(ctx, req.(*CloseStdinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_TtyWinResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(TtyWinResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).TtyWinResize(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/TtyWinResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).TtyWinResize(ctx, req.(*TtyWinResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_CreateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CreateSandbox(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CreateSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CreateSandbox(ctx, req.(*CreateSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_DestroySandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).DestroySandbox(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/DestroySandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).DestroySandbox(ctx, req.(*DestroySandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/UpdateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).AddRoute(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_OnlineCPUMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineCPUMemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).OnlineCPUMem(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/OnlineCPUMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).OnlineCPUMem(ctx, req.(*OnlineCPUMemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_GetEvents_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperstartServiceServer).GetEvents(m, &hyperstartServiceGetEventsServer{stream})
}

type HyperstartService_GetEventsServer interface {
	Send(*Event) error
	grpc1.ServerStream
}

type hyperstartServiceGetEventsServer struct {
	grpc1.ServerStream
}

func (x *hyperstartServiceGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _HyperstartService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.HyperstartService",
	HandlerType: (*HyperstartServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _HyperstartService_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _HyperstartService_StartContainer_Handler,
		},
		{
			MethodName: "ExecProcess",
			Handler:    _HyperstartService_ExecProcess_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _HyperstartService_SignalProcess_Handler,
		},
		{
			MethodName: "WriteStdin",
			Handler:    _HyperstartService_WriteStdin_Handler,
		},
		{
			MethodName: "ReadStdout",
			Handler:    _HyperstartService_ReadStdout_Handler,
		},
		{
			MethodName: "ReadStderr",
			Handler:    _HyperstartService_ReadStderr_Handler,
		},
		{
			MethodName: "CloseStdin",
			Handler:    _HyperstartService_CloseStdin_Handler,
		},
		{
			MethodName: "TtyWinResize",
			Handler:    _HyperstartService_TtyWinResize_Handler,
		},
		{
			MethodName: "CreateSandbox",
			Handler:    _HyperstartService_CreateSandbox_Handler,
		},
		{
			MethodName: "DestroySandbox",
			Handler:    _HyperstartService_DestroySandbox_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _HyperstartService_UpdateInterface_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _HyperstartService_AddRoute_Handler,
		},
		{
			MethodName: "OnlineCPUMem",
			Handler:    _HyperstartService_OnlineCPUMem_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _HyperstartService_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hyperstart.proto",
}

func init() { proto.RegisterFile("hyperstart.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xe7, 0x6a, 0xbb, 0x89, 0xc7, 0x71, 0x93, 0xac, 0x93, 0xf4, 0x70, 0x8a, 0x1a, 0x0e, 0x89,
	0x86, 0x07, 0x1c, 0x08, 0x12, 0xa2, 0x48, 0xa8, 0x0a, 0x26, 0x4a, 0x23, 0x54, 0x1a, 0xce, 0x49,
	0xc3, 0x5b, 0xb4, 0xb9, 0x9b, 0xb8, 0x07, 0xf6, 0xed, 0xb1, 0xbb, 0x97, 0xc4, 0xbc, 0xf1, 0x0c,
	0x6f, 0x7c, 0x04, 0xbe, 0x00, 0x6f, 0x7c, 0x31, 0x3e, 0x00, 0xda, 0xbd, 0xdd, 0xf3, 0xd9, 0x3e,
	0x47, 0xb4, 0x32, 0x6f, 0x33, 0xb3, 0xab, 0xdf, 0xcc, 0x6f, 0xf6, 0xcf, 0x6f, 0x60, 0xed, 0xf5,
	0x28, 0x41, 0x2e, 0x24, 0xe5, 0xb2, 0x93, 0x70, 0x26, 0x19, 0xa9, 0xf6, 0x79, 0x12, 0xb4, 0xeb,
	0x2c, 0x88, 0xb2, 0x40, 0x7b, 0xbb, 0xcf, 0x58, 0x7f, 0x80, 0x7b, 0xda, 0xbb, 0x4c, 0xaf, 0xf6,
	0x70, 0x98, 0xc8, 0x91, 0x59, 0x7c, 0x3c, 0xbd, 0x28, 0xa3, 0x21, 0x0a, 0x49, 0x87, 0x49, 0xb6,
	0xc1, 0xfb, 0xdb, 0x81, 0xad, 0x2e, 0x47, 0x2a, 0xb1, 0xcb, 0x62, 0x49, 0xa3, 0x18, 0xb9, 0x8f,
	0x3f, 0xa7, 0x28, 0x24, 0x79, 0x1f, 0x56, 0x02, 0x1b, 0xbb, 0x88, 0x42, 0xd7, 0xd9, 0x71, 0x76,
	0xeb, 0x7e, 0x23, 0x8f, 0x1d, 0x87, 0xe4, 0x53, 0x68, 0x08, 0xc9, 0xa3, 0xb8, 0x7f, 0x91, 0x0a,
	0xe4, 0xee, 0xbd, 0x1d, 0x67, 0xb7, 0xb1, 0xbf, 0xd6, 0x51, 0x25, 0x76, 0x7a, 0x7a, 0xe1, 0x4c,
	0x20, 0xf7, 0x41, 0xe4, 0x36, 0xf9, 0x08, 0x96, 0x85, 0x64, 0x9c, 0xf6, 0x51, 0xb8, 0x95, 0x9d,
	0xca, 0x6e, 0x63, 0xbf, 0x69, 0xf7, 0xeb, 0xa8, 0x9f, 0x2f, 0x93, 0x47, 0x50, 0x79, 0xd9, 0x3d,
	0x76, 0xab, 0x1a, 0x15, 0xcc, 0xae, 0x04, 0x03, 0x5f, 0x85, 0xbd, 0x2f, 0x61, 0xb3, 0xa7, 0xfa,
	0xf2, 0x16, 0x75, 0x7b, 0x7f, 0x38, 0x40, 0x0e, 0x6f, 0x31, 0x38, 0xe1, 0x2c, 0x40, 0x21, 0xfe,
	0x5f, 0xc6, 0x4f, 0x60, 0x29, 0xc9, 0xf2, 0xb8, 0x15, 0xbd, 0xdd, 0x10, 0xb6, 0xc9, 0xed, 0xaa,
	0x97, 0xc0, 0x46, 0x2f, 0xea, 0xc7, 0x74, 0xf0, 0xe6, 0x65, 0xbd, 0x07, 0x60, 0x50, 0xd4, 0x86,
	0x7b, 0x7a, 0x43, 0xdd, 0x44, 0x8e, 0x43, 0xb2, 0x05, 0xf7, 0x85, 0x46, 0xd6, 0x15, 0x34, 0x7d,
	0xe3, 0x79, 0xaf, 0x80, 0x9c, 0xd3, 0x48, 0x2e, 0x3a, 0x9f, 0xf7, 0x31, 0xb4, 0x26, 0x70, 0x45,
	0xc2, 0x62, 0x81, 0xba, 0x0c, 0x49, 0x65, 0x2a, 0x34, 0x64, 0xcd, 0x37, 0x9e, 0xf7, 0x23, 0x90,
	0x73, 0x1e, 0x49, 0xec, 0x49, 0x8e, 0x74, 0xb8, 0x38, 0xda, 0x04, 0xaa, 0x21, 0x95, 0x54, 0x93,
	0x5e, 0xf1, 0xb5, 0xed, 0x3d, 0x81, 0xd6, 0x44, 0x2e, 0x53, 0xda, 0x1a, 0x54, 0x06, 0x18, 0xeb,
	0x1c, 0x4d, 0x5f, 0x99, 0x5e, 0x1f, 0xd6, 0x7d, 0xa4, 0xe1, 0xa2, 0x6b, 0x32, 0x89, 0x2a, 0xe3,
	0x44, 0xbb, 0x40, 0x8a, 0x89, 0x4c, 0x41, 0xb6, 0x76, 0xa7, 0x50, 0xfb, 0x19, 0xac, 0x77, 0x07,
	0x4c, 0x60, 0x4f, 0x86, 0x51, 0xbc, 0xb8, 0xd3, 0xfa, 0xd5, 0x81, 0xd6, 0xa9, 0x1c, 0x9d, 0x2b,
	0x4c, 0x11, 0xfd, 0x82, 0x0b, 0x25, 0xcb, 0xd9, 0x8d, 0x25, 0xcb, 0xd9, 0x8d, 0xba, 0x02, 0x01,
	0x1b, 0xa4, 0xc3, 0x58, 0x3f, 0xeb, 0xa6, 0x6f, 0x3c, 0x8f, 0xc1, 0x46, 0xf6, 0x0d, 0xf5, 0x68,
	0x1c, 0x5e, 0xb2, 0x5b, 0x5b, 0x43, 0x1b, 0x96, 0x5f, 0x33, 0x21, 0x63, 0x3a, 0x44, 0x93, 0x3f,
	0xf7, 0x15, 0x7a, 0x18, 0x0b, 0xf7, 0xde, 0x4e, 0x65, 0xb7, 0xee, 0x2b, 0xf3, 0x0d, 0x3e, 0x17,
	0xef, 0x21, 0x6c, 0x7e, 0x83, 0x42, 0x72, 0x36, 0x9a, 0xcc, 0xe8, 0x3d, 0x85, 0xfa, 0x71, 0x72,
	0x10, 0x86, 0x1c, 0x85, 0x20, 0x2e, 0x2c, 0xd1, 0xcc, 0x34, 0xd9, 0xad, 0xab, 0xce, 0x67, 0x48,
	0xc5, 0x4f, 0x86, 0xb3, 0xb6, 0xbd, 0x3f, 0x1d, 0xd8, 0x3a, 0x4b, 0x42, 0x2a, 0xf1, 0x38, 0x96,
	0xc8, 0xaf, 0x68, 0x90, 0xf7, 0x92, 0x40, 0x55, 0x8e, 0x92, 0x8c, 0x43, 0xd5, 0xd7, 0xb6, 0xea,
	0x45, 0x88, 0xd7, 0x51, 0x80, 0x06, 0xc4, 0x78, 0x2a, 0x69, 0x8c, 0x37, 0xdf, 0x29, 0xca, 0x95,
	0x2c, 0xa9, 0x71, 0xd5, 0xef, 0x13, 0xd9, 0xda, 0x50, 0xb8, 0x55, 0x4d, 0x71, 0x35, 0xa3, 0x98,
	0x17, 0xed, 0x17, 0xf7, 0xa8, 0x26, 0x0d, 0x65, 0xea, 0xd6, 0x74, 0x5e, 0x65, 0x7a, 0x9f, 0xc3,
	0xea, 0x41, 0x18, 0xfa, 0x2c, 0x95, 0x79, 0x75, 0x1f, 0xc0, 0x7d, 0xae, 0x7c, 0xc5, 0x52, 0x41,
	0x36, 0x32, 0xc8, 0x6c, 0x8f, 0x59, 0xf2, 0x36, 0xa1, 0xf5, 0x32, 0x1e, 0x44, 0x31, 0x76, 0x4f,
	0xce, 0x5e, 0xa0, 0x7d, 0x12, 0xde, 0xef, 0x0e, 0x2c, 0x99, 0xf6, 0x6a, 0x46, 0x3c, 0xba, 0x46,
	0x6e, 0xba, 0x65, 0x3c, 0xfd, 0xf0, 0x59, 0xca, 0xc7, 0x4c, 0x33, 0x4f, 0xc5, 0xaf, 0x84, 0xee,
	0x4b, 0x46, 0xd4, 0x78, 0xaa, 0x03, 0x2c, 0x91, 0x11, 0x8b, 0x33, 0x8e, 0x75, 0xdf, 0xba, 0xe4,
	0x31, 0x34, 0x86, 0x2c, 0x8d, 0xe5, 0x45, 0xc2, 0xa2, 0x58, 0x6a, 0x5a, 0x75, 0x1f, 0x74, 0xe8,
	0x44, 0x45, 0xbc, 0x1f, 0x00, 0xc6, 0xff, 0xb0, 0x62, 0x9f, 0xe6, 0x37, 0x57, 0x99, 0x2a, 0xd2,
	0xcf, 0xaf, 0xaa, 0x32, 0xc9, 0x87, 0xf0, 0x80, 0x86, 0x61, 0xa4, 0xf0, 0xe9, 0xe0, 0x28, 0x0a,
	0xb3, 0xab, 0x53, 0xf7, 0xa7, 0xa2, 0xde, 0x0b, 0xa8, 0xe9, 0x86, 0xe8, 0xa7, 0x89, 0x42, 0x1a,
	0x54, 0x6d, 0xab, 0x8a, 0xfb, 0x54, 0xe2, 0x0d, 0x1d, 0x19, 0x68, 0xeb, 0x16, 0x4e, 0xb9, 0x52,
	0x3c, 0x65, 0xef, 0x37, 0x07, 0x9a, 0x87, 0xd7, 0x18, 0xcb, 0x05, 0xfe, 0xf3, 0x5f, 0x40, 0x3d,
	0x17, 0x78, 0x23, 0x36, 0xed, 0x4e, 0x36, 0x02, 0x74, 0xec, 0x08, 0xd0, 0x39, 0xb5, 0x3b, 0xfc,
	0xf1, 0x66, 0xef, 0x15, 0x6c, 0xe4, 0x42, 0x7a, 0x8a, 0x7c, 0x18, 0xc5, 0x54, 0x51, 0xff, 0x2f,
	0x35, 0x6d, 0x43, 0x1d, 0x6f, 0x23, 0x79, 0x11, 0xb0, 0x30, 0x3b, 0xdf, 0x9a, 0xbf, 0xac, 0x02,
	0x5d, 0x16, 0xa2, 0x77, 0x02, 0xc4, 0xa8, 0x40, 0x11, 0x75, 0x92, 0x86, 0x33, 0x4d, 0xe3, 0x4e,
	0xc4, 0xbf, 0x1c, 0xa8, 0xe9, 0xbe, 0x91, 0xef, 0x61, 0x73, 0x5c, 0x9b, 0x1c, 0xc3, 0x6b, 0x40,
	0xcd, 0x5c, 0x5d, 0xe2, 0x32, 0x5a, 0xcf, 0xdf, 0xf1, 0x37, 0x82, 0x32, 0xba, 0xdf, 0x42, 0xcb,
	0x16, 0x56, 0x04, 0xcc, 0x64, 0xde, 0x9d, 0xd0, 0xed, 0x49, 0x38, 0x92, 0xcc, 0x44, 0xbf, 0x5e,
	0x82, 0x1a, 0xaa, 0x42, 0xf7, 0xff, 0x59, 0x82, 0xf5, 0xe7, 0xf9, 0x20, 0xd7, 0x43, 0xae, 0x9f,
	0xf9, 0x11, 0xac, 0x4e, 0x4d, 0x5e, 0xe4, 0x91, 0x29, 0xb9, 0x74, 0x20, 0x6b, 0x6f, 0xcd, 0x1c,
	0xe5, 0xa1, 0x1a, 0xf5, 0xc8, 0x21, 0x3c, 0x98, 0x9c, 0x84, 0xc8, 0xb6, 0xfd, 0xf5, 0x4a, 0xe6,
	0xa3, 0xb9, 0x30, 0xcf, 0xa0, 0x51, 0x98, 0x89, 0x88, 0x61, 0x3b, 0x3b, 0x26, 0xcd, 0x05, 0xe8,
	0x42, 0x73, 0x62, 0x7e, 0x21, 0xe6, 0x04, 0xca, 0x86, 0x9a, 0xb9, 0x20, 0x07, 0x00, 0x46, 0x9f,
	0xc3, 0x28, 0xb6, 0x45, 0xcc, 0x4e, 0x07, 0xed, 0x77, 0x4b, 0x56, 0x8c, 0x74, 0x3e, 0x03, 0xc8,
	0x04, 0x35, 0x64, 0xa9, 0x24, 0x0f, 0xcd, 0x5f, 0x36, 0xad, 0xe5, 0x6d, 0x77, 0x76, 0x61, 0x06,
	0x00, 0x39, 0x7f, 0x1b, 0x80, 0xaf, 0x00, 0xc6, 0x42, 0x6d, 0x01, 0x66, 0xa4, 0xfb, 0x8e, 0x1e,
	0xac, 0x14, 0xf5, 0x98, 0x18, 0xae, 0x25, 0x1a, 0x7d, 0xd7, 0x59, 0x4c, 0xe8, 0xa9, 0x3d, 0x8b,
	0x32, 0x91, 0xbd, 0xeb, 0x62, 0x4d, 0x6a, 0xa4, 0xbd, 0x58, 0xa5, 0xca, 0x39, 0x17, 0xe6, 0x08,
	0x56, 0xa7, 0x54, 0xd1, 0x5e, 0xf4, 0x72, 0xb1, 0x9c, 0x0b, 0xf4, 0x14, 0x96, 0xad, 0x72, 0x91,
	0xcd, 0x0c, 0x61, 0x4a, 0xc9, 0xee, 0x6a, 0x69, 0x51, 0xbc, 0x6c, 0x4b, 0x4b, 0x04, 0x6d, 0x2e,
	0xc4, 0x1e, 0xd4, 0x8f, 0x50, 0x66, 0x5f, 0x36, 0x69, 0x99, 0xd7, 0x51, 0xfc, 0xc0, 0xdb, 0x8d,
	0x42, 0xf0, 0x13, 0xe7, 0xf2, 0xbe, 0x06, 0xf8, 0xec, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d,
	0x40, 0x8a, 0x8f, 0xc5, 0x0d, 0x00, 0x00,
}
