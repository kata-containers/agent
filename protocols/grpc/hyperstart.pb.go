// Code generated by protoc-gen-gogo.
// source: hyperstart.proto
// DO NOT EDIT!

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	hyperstart.proto
	oci.proto

It has these top-level messages:
	CreateContainerRequest
	StartContainerRequest
	SignalContainerRequest
	ExecProcessRequest
	SignalProcessRequest
	WaitProcessRequest
	WaitProcessResponse
	WriteStreamRequest
	WriteStreamResponse
	ReadStreamRequest
	ReadStreamResponse
	CloseStdinRequest
	TtyWinResizeRequest
	CreateSandboxRequest
	DestroySandboxRequest
	IpAddress
	UpdateInterfaceRequest
	AddRouteRequest
	OnlineCPUMemRequest
	Storage
	StringUser
	Route
	Spec
	Process
	Box
	User
	LinuxCapabilities
	POSIXRlimit
	Mount
	Root
	Hooks
	Hook
	Linux
	Windows
	Solaris
	LinuxIDMapping
	LinuxNamespace
	LinuxDevice
	LinuxResources
	LinuxMemory
	LinuxCPU
	LinuxWeightDevice
	LinuxThrottleDevice
	LinuxBlockIO
	LinuxPids
	LinuxDeviceCgroup
	LinuxNetwork
	LinuxHugepageLimit
	LinuxInterfacePriority
	LinuxSeccomp
	LinuxSeccompArg
	LinuxSyscall
	LinuxIntelRdt
*/
package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateContainerRequest struct {
	ContainerId string      `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	StringUser  *StringUser `protobuf:"bytes,2,opt,name=string_user,json=stringUser" json:"string_user,omitempty"`
	Storages    []*Storage  `protobuf:"bytes,3,rep,name=storages" json:"storages,omitempty"`
	OCI         *Spec       `protobuf:"bytes,4,opt,name=OCI" json:"OCI,omitempty"`
}

func (m *CreateContainerRequest) Reset()                    { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()               {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{0} }

func (m *CreateContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *CreateContainerRequest) GetStringUser() *StringUser {
	if m != nil {
		return m.StringUser
	}
	return nil
}

func (m *CreateContainerRequest) GetStorages() []*Storage {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *CreateContainerRequest) GetOCI() *Spec {
	if m != nil {
		return m.OCI
	}
	return nil
}

type StartContainerRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (m *StartContainerRequest) Reset()                    { *m = StartContainerRequest{} }
func (m *StartContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*StartContainerRequest) ProtoMessage()               {}
func (*StartContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{1} }

func (m *StartContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type SignalContainerRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Signal      uint32 `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty"`
	// When all is set to true, the signal will be
	// sent to all processes inside the container.
	All bool `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *SignalContainerRequest) Reset()                    { *m = SignalContainerRequest{} }
func (m *SignalContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*SignalContainerRequest) ProtoMessage()               {}
func (*SignalContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{2} }

func (m *SignalContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *SignalContainerRequest) GetSignal() uint32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

func (m *SignalContainerRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type ExecProcessRequest struct {
	ContainerId string      `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string      `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	StringUser  *StringUser `protobuf:"bytes,3,opt,name=string_user,json=stringUser" json:"string_user,omitempty"`
	Process     *Process    `protobuf:"bytes,4,opt,name=process" json:"process,omitempty"`
}

func (m *ExecProcessRequest) Reset()                    { *m = ExecProcessRequest{} }
func (m *ExecProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecProcessRequest) ProtoMessage()               {}
func (*ExecProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{3} }

func (m *ExecProcessRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ExecProcessRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *ExecProcessRequest) GetStringUser() *StringUser {
	if m != nil {
		return m.StringUser
	}
	return nil
}

func (m *ExecProcessRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type SignalProcessRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Signal      uint32 `protobuf:"varint,3,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (m *SignalProcessRequest) Reset()                    { *m = SignalProcessRequest{} }
func (m *SignalProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*SignalProcessRequest) ProtoMessage()               {}
func (*SignalProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{4} }

func (m *SignalProcessRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *SignalProcessRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *SignalProcessRequest) GetSignal() uint32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type WaitProcessRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
}

func (m *WaitProcessRequest) Reset()                    { *m = WaitProcessRequest{} }
func (m *WaitProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitProcessRequest) ProtoMessage()               {}
func (*WaitProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{5} }

func (m *WaitProcessRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *WaitProcessRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

type WaitProcessResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *WaitProcessResponse) Reset()                    { *m = WaitProcessResponse{} }
func (m *WaitProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitProcessResponse) ProtoMessage()               {}
func (*WaitProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{6} }

func (m *WaitProcessResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WriteStreamRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteStreamRequest) Reset()                    { *m = WriteStreamRequest{} }
func (m *WriteStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamRequest) ProtoMessage()               {}
func (*WriteStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{7} }

func (m *WriteStreamRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *WriteStreamRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *WriteStreamRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteStreamResponse struct {
	Len uint32 `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
}

func (m *WriteStreamResponse) Reset()                    { *m = WriteStreamResponse{} }
func (m *WriteStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamResponse) ProtoMessage()               {}
func (*WriteStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{8} }

func (m *WriteStreamResponse) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadStreamRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Len         uint32 `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
}

func (m *ReadStreamRequest) Reset()                    { *m = ReadStreamRequest{} }
func (m *ReadStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamRequest) ProtoMessage()               {}
func (*ReadStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{9} }

func (m *ReadStreamRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ReadStreamRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *ReadStreamRequest) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadStreamResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadStreamResponse) Reset()                    { *m = ReadStreamResponse{} }
func (m *ReadStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamResponse) ProtoMessage()               {}
func (*ReadStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{10} }

func (m *ReadStreamResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CloseStdinRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
}

func (m *CloseStdinRequest) Reset()                    { *m = CloseStdinRequest{} }
func (m *CloseStdinRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseStdinRequest) ProtoMessage()               {}
func (*CloseStdinRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{11} }

func (m *CloseStdinRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *CloseStdinRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

type TtyWinResizeRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ProcessId   string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Row         uint32 `protobuf:"varint,3,opt,name=row,proto3" json:"row,omitempty"`
	Column      uint32 `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`
}

func (m *TtyWinResizeRequest) Reset()                    { *m = TtyWinResizeRequest{} }
func (m *TtyWinResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*TtyWinResizeRequest) ProtoMessage()               {}
func (*TtyWinResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{12} }

func (m *TtyWinResizeRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *TtyWinResizeRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *TtyWinResizeRequest) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *TtyWinResizeRequest) GetColumn() uint32 {
	if m != nil {
		return m.Column
	}
	return 0
}

type CreateSandboxRequest struct {
	Hostname     string     `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Dns          []string   `protobuf:"bytes,2,rep,name=dns" json:"dns,omitempty"`
	Storages     []*Storage `protobuf:"bytes,3,rep,name=storages" json:"storages,omitempty"`
	SandboxPidns bool       `protobuf:"varint,4,opt,name=sandbox_pidns,json=sandboxPidns,proto3" json:"sandbox_pidns,omitempty"`
}

func (m *CreateSandboxRequest) Reset()                    { *m = CreateSandboxRequest{} }
func (m *CreateSandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSandboxRequest) ProtoMessage()               {}
func (*CreateSandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{13} }

func (m *CreateSandboxRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *CreateSandboxRequest) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *CreateSandboxRequest) GetStorages() []*Storage {
	if m != nil {
		return m.Storages
	}
	return nil
}

func (m *CreateSandboxRequest) GetSandboxPidns() bool {
	if m != nil {
		return m.SandboxPidns
	}
	return false
}

type DestroySandboxRequest struct {
}

func (m *DestroySandboxRequest) Reset()                    { *m = DestroySandboxRequest{} }
func (m *DestroySandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroySandboxRequest) ProtoMessage()               {}
func (*DestroySandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{14} }

type IpAddress struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Mask    string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (m *IpAddress) Reset()                    { *m = IpAddress{} }
func (m *IpAddress) String() string            { return proto.CompactTextString(m) }
func (*IpAddress) ProtoMessage()               {}
func (*IpAddress) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{15} }

func (m *IpAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IpAddress) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

type UpdateInterfaceRequest struct {
	Type        uint64       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Device      string       `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	NewName     string       `protobuf:"bytes,3,opt,name=newName,proto3" json:"newName,omitempty"`
	IpAddresses []*IpAddress `protobuf:"bytes,4,rep,name=ipAddresses" json:"ipAddresses,omitempty"`
	Mtu         uint64       `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (m *UpdateInterfaceRequest) Reset()         { *m = UpdateInterfaceRequest{} }
func (m *UpdateInterfaceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateInterfaceRequest) ProtoMessage()    {}
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorHyperstart, []int{16}
}

func (m *UpdateInterfaceRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateInterfaceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *UpdateInterfaceRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *UpdateInterfaceRequest) GetIpAddresses() []*IpAddress {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *UpdateInterfaceRequest) GetMtu() uint64 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

type AddRouteRequest struct {
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *AddRouteRequest) Reset()                    { *m = AddRouteRequest{} }
func (m *AddRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRouteRequest) ProtoMessage()               {}
func (*AddRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{17} }

func (m *AddRouteRequest) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type OnlineCPUMemRequest struct {
}

func (m *OnlineCPUMemRequest) Reset()                    { *m = OnlineCPUMemRequest{} }
func (m *OnlineCPUMemRequest) String() string            { return proto.CompactTextString(m) }
func (*OnlineCPUMemRequest) ProtoMessage()               {}
func (*OnlineCPUMemRequest) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{18} }

type Storage struct {
	Driver     string   `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Fstype     string   `protobuf:"bytes,3,opt,name=fstype,proto3" json:"fstype,omitempty"`
	Options    []string `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
	MountPoint string   `protobuf:"bytes,5,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
}

func (m *Storage) Reset()                    { *m = Storage{} }
func (m *Storage) String() string            { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()               {}
func (*Storage) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{19} }

func (m *Storage) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Storage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Storage) GetFstype() string {
	if m != nil {
		return m.Fstype
	}
	return ""
}

func (m *Storage) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Storage) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

type StringUser struct {
	Uid            string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid            string   `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	AdditionalGids []string `protobuf:"bytes,3,rep,name=additionalGids" json:"additionalGids,omitempty"`
}

func (m *StringUser) Reset()                    { *m = StringUser{} }
func (m *StringUser) String() string            { return proto.CompactTextString(m) }
func (*StringUser) ProtoMessage()               {}
func (*StringUser) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{20} }

func (m *StringUser) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *StringUser) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *StringUser) GetAdditionalGids() []string {
	if m != nil {
		return m.AdditionalGids
	}
	return nil
}

type Route struct {
	Dest    string `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	Gateway string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Device  string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorHyperstart, []int{21} }

func (m *Route) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *Route) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Route) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateContainerRequest)(nil), "grpc.CreateContainerRequest")
	proto.RegisterType((*StartContainerRequest)(nil), "grpc.StartContainerRequest")
	proto.RegisterType((*SignalContainerRequest)(nil), "grpc.SignalContainerRequest")
	proto.RegisterType((*ExecProcessRequest)(nil), "grpc.ExecProcessRequest")
	proto.RegisterType((*SignalProcessRequest)(nil), "grpc.SignalProcessRequest")
	proto.RegisterType((*WaitProcessRequest)(nil), "grpc.WaitProcessRequest")
	proto.RegisterType((*WaitProcessResponse)(nil), "grpc.WaitProcessResponse")
	proto.RegisterType((*WriteStreamRequest)(nil), "grpc.WriteStreamRequest")
	proto.RegisterType((*WriteStreamResponse)(nil), "grpc.WriteStreamResponse")
	proto.RegisterType((*ReadStreamRequest)(nil), "grpc.ReadStreamRequest")
	proto.RegisterType((*ReadStreamResponse)(nil), "grpc.ReadStreamResponse")
	proto.RegisterType((*CloseStdinRequest)(nil), "grpc.CloseStdinRequest")
	proto.RegisterType((*TtyWinResizeRequest)(nil), "grpc.TtyWinResizeRequest")
	proto.RegisterType((*CreateSandboxRequest)(nil), "grpc.CreateSandboxRequest")
	proto.RegisterType((*DestroySandboxRequest)(nil), "grpc.DestroySandboxRequest")
	proto.RegisterType((*IpAddress)(nil), "grpc.IpAddress")
	proto.RegisterType((*UpdateInterfaceRequest)(nil), "grpc.UpdateInterfaceRequest")
	proto.RegisterType((*AddRouteRequest)(nil), "grpc.AddRouteRequest")
	proto.RegisterType((*OnlineCPUMemRequest)(nil), "grpc.OnlineCPUMemRequest")
	proto.RegisterType((*Storage)(nil), "grpc.Storage")
	proto.RegisterType((*StringUser)(nil), "grpc.StringUser")
	proto.RegisterType((*Route)(nil), "grpc.Route")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for HyperstartService service

type HyperstartServiceClient interface {
	// execution
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	SignalContainer(ctx context.Context, in *SignalContainerRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	ExecProcess(ctx context.Context, in *ExecProcessRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	WaitProcess(ctx context.Context, in *WaitProcessRequest, opts ...grpc1.CallOption) (*WaitProcessResponse, error)
	// stdio
	WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc1.CallOption) (*WriteStreamResponse, error)
	ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error)
	ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error)
	CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
	OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error)
}

type hyperstartServiceClient struct {
	cc *grpc1.ClientConn
}

func NewHyperstartServiceClient(cc *grpc1.ClientConn) HyperstartServiceClient {
	return &hyperstartServiceClient{cc}
}

func (c *hyperstartServiceClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CreateContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/StartContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) SignalContainer(ctx context.Context, in *SignalContainerRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/SignalContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ExecProcess(ctx context.Context, in *ExecProcessRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ExecProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/SignalProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) WaitProcess(ctx context.Context, in *WaitProcessRequest, opts ...grpc1.CallOption) (*WaitProcessResponse, error) {
	out := new(WaitProcessResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/WaitProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc1.CallOption) (*WriteStreamResponse, error) {
	out := new(WriteStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/WriteStdin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ReadStdout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ReadStderr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CloseStdin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/TtyWinResize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) CreateSandbox(ctx context.Context, in *CreateSandboxRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CreateSandbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/DestroySandbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/UpdateInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/AddRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc1.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/OnlineCPUMem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HyperstartService service

type HyperstartServiceServer interface {
	// execution
	CreateContainer(context.Context, *CreateContainerRequest) (*google_protobuf2.Empty, error)
	StartContainer(context.Context, *StartContainerRequest) (*google_protobuf2.Empty, error)
	SignalContainer(context.Context, *SignalContainerRequest) (*google_protobuf2.Empty, error)
	ExecProcess(context.Context, *ExecProcessRequest) (*google_protobuf2.Empty, error)
	SignalProcess(context.Context, *SignalProcessRequest) (*google_protobuf2.Empty, error)
	WaitProcess(context.Context, *WaitProcessRequest) (*WaitProcessResponse, error)
	// stdio
	WriteStdin(context.Context, *WriteStreamRequest) (*WriteStreamResponse, error)
	ReadStdout(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	ReadStderr(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	CloseStdin(context.Context, *CloseStdinRequest) (*google_protobuf2.Empty, error)
	TtyWinResize(context.Context, *TtyWinResizeRequest) (*google_protobuf2.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	CreateSandbox(context.Context, *CreateSandboxRequest) (*google_protobuf2.Empty, error)
	DestroySandbox(context.Context, *DestroySandboxRequest) (*google_protobuf2.Empty, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*google_protobuf2.Empty, error)
	AddRoute(context.Context, *AddRouteRequest) (*google_protobuf2.Empty, error)
	OnlineCPUMem(context.Context, *OnlineCPUMemRequest) (*google_protobuf2.Empty, error)
}

func RegisterHyperstartServiceServer(s *grpc1.Server, srv HyperstartServiceServer) {
	s.RegisterService(&_HyperstartService_serviceDesc, srv)
}

func _HyperstartService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).StartContainer(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_SignalContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).SignalContainer(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/SignalContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).SignalContainer(ctx, req.(*SignalContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ExecProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ExecProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ExecProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ExecProcess(ctx, req.(*ExecProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).SignalProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_WaitProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).WaitProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/WaitProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).WaitProcess(ctx, req.(*WaitProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_WriteStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).WriteStdin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/WriteStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).WriteStdin(ctx, req.(*WriteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ReadStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ReadStdout(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ReadStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ReadStdout(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ReadStderr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ReadStderr(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ReadStderr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ReadStderr(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_CloseStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStdinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CloseStdin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CloseStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CloseStdin(ctx, req.(*CloseStdinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_TtyWinResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(TtyWinResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).TtyWinResize(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/TtyWinResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).TtyWinResize(ctx, req.(*TtyWinResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_CreateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CreateSandbox(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CreateSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CreateSandbox(ctx, req.(*CreateSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_DestroySandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).DestroySandbox(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/DestroySandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).DestroySandbox(ctx, req.(*DestroySandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/UpdateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).AddRoute(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_OnlineCPUMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineCPUMemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).OnlineCPUMem(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/OnlineCPUMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).OnlineCPUMem(ctx, req.(*OnlineCPUMemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HyperstartService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.HyperstartService",
	HandlerType: (*HyperstartServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _HyperstartService_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _HyperstartService_StartContainer_Handler,
		},
		{
			MethodName: "SignalContainer",
			Handler:    _HyperstartService_SignalContainer_Handler,
		},
		{
			MethodName: "ExecProcess",
			Handler:    _HyperstartService_ExecProcess_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _HyperstartService_SignalProcess_Handler,
		},
		{
			MethodName: "WaitProcess",
			Handler:    _HyperstartService_WaitProcess_Handler,
		},
		{
			MethodName: "WriteStdin",
			Handler:    _HyperstartService_WriteStdin_Handler,
		},
		{
			MethodName: "ReadStdout",
			Handler:    _HyperstartService_ReadStdout_Handler,
		},
		{
			MethodName: "ReadStderr",
			Handler:    _HyperstartService_ReadStderr_Handler,
		},
		{
			MethodName: "CloseStdin",
			Handler:    _HyperstartService_CloseStdin_Handler,
		},
		{
			MethodName: "TtyWinResize",
			Handler:    _HyperstartService_TtyWinResize_Handler,
		},
		{
			MethodName: "CreateSandbox",
			Handler:    _HyperstartService_CreateSandbox_Handler,
		},
		{
			MethodName: "DestroySandbox",
			Handler:    _HyperstartService_DestroySandbox_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _HyperstartService_UpdateInterface_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _HyperstartService_AddRoute_Handler,
		},
		{
			MethodName: "OnlineCPUMem",
			Handler:    _HyperstartService_OnlineCPUMem_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "hyperstart.proto",
}

func init() { proto.RegisterFile("hyperstart.proto", fileDescriptorHyperstart) }

var fileDescriptorHyperstart = []byte{
	// 1041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x06, 0x4d, 0xf9, 0x8f, 0x46, 0x56, 0x6c, 0xaf, 0x63, 0x87, 0x3f, 0x25, 0x3f, 0x54, 0x65,
	0x80, 0x46, 0x3d, 0x54, 0x41, 0x5d, 0xa0, 0x40, 0x0a, 0x14, 0x81, 0xab, 0x1a, 0xae, 0x0f, 0x69,
	0x0c, 0xaa, 0xae, 0x7b, 0x33, 0xd6, 0xe2, 0x58, 0x61, 0x2b, 0x71, 0xd9, 0xdd, 0x65, 0x1c, 0xf5,
	0xd6, 0x7b, 0x8f, 0x7d, 0x83, 0xbe, 0x41, 0x2f, 0x7d, 0x8d, 0x3e, 0x52, 0xb1, 0xff, 0x28, 0x4a,
	0xa2, 0x8c, 0xc4, 0xd0, 0x6d, 0x66, 0x76, 0xf9, 0xcd, 0x37, 0xdf, 0x2e, 0x67, 0x16, 0x76, 0xdf,
	0x4c, 0x32, 0xe4, 0x42, 0x52, 0x2e, 0xbb, 0x19, 0x67, 0x92, 0x91, 0xda, 0x90, 0x67, 0x83, 0x56,
	0x9d, 0x0d, 0x12, 0x13, 0x68, 0x3d, 0x1e, 0x32, 0x36, 0x1c, 0xe1, 0x73, 0xed, 0x5d, 0xe7, 0x37,
	0xcf, 0x71, 0x9c, 0xc9, 0x89, 0x59, 0x0c, 0xff, 0xf1, 0xe0, 0xb0, 0xc7, 0x91, 0x4a, 0xec, 0xb1,
	0x54, 0xd2, 0x24, 0x45, 0x1e, 0xe1, 0xaf, 0x39, 0x0a, 0x49, 0x3e, 0x86, 0xed, 0x81, 0x8b, 0x5d,
	0x25, 0x71, 0xe0, 0xb5, 0xbd, 0x4e, 0x3d, 0x6a, 0x14, 0xb1, 0xb3, 0x98, 0x7c, 0x0e, 0x0d, 0x21,
	0x79, 0x92, 0x0e, 0xaf, 0x72, 0x81, 0x3c, 0x58, 0x6b, 0x7b, 0x9d, 0xc6, 0xd1, 0x6e, 0x57, 0x31,
	0xe8, 0xf6, 0xf5, 0xc2, 0x85, 0x40, 0x1e, 0x81, 0x28, 0x6c, 0xf2, 0x29, 0x6c, 0x09, 0xc9, 0x38,
	0x1d, 0xa2, 0x08, 0xfc, 0xb6, 0xdf, 0x69, 0x1c, 0x35, 0xdd, 0x7e, 0x1d, 0x8d, 0x8a, 0x65, 0xf2,
	0x04, 0xfc, 0xd7, 0xbd, 0xb3, 0xa0, 0xa6, 0x51, 0xc1, 0xee, 0xca, 0x70, 0x10, 0xa9, 0x70, 0xf8,
	0x15, 0x1c, 0xf4, 0x55, 0xd9, 0xf7, 0xe0, 0x1d, 0x22, 0x1c, 0xf6, 0x93, 0x61, 0x4a, 0x47, 0xf7,
	0x29, 0xfa, 0x10, 0x36, 0x84, 0xfe, 0x58, 0xd7, 0xdb, 0x8c, 0xac, 0x47, 0x76, 0xc1, 0xa7, 0xa3,
	0x51, 0xe0, 0xb7, 0xbd, 0xce, 0x56, 0xa4, 0xcc, 0xf0, 0x6f, 0x0f, 0xc8, 0xc9, 0x3b, 0x1c, 0x9c,
	0x73, 0x36, 0x40, 0x21, 0x3e, 0x20, 0xc7, 0xff, 0x01, 0x32, 0xf3, 0x91, 0xda, 0xb0, 0xa6, 0x37,
	0xd4, 0x6d, 0x64, 0x51, 0x77, 0xff, 0x3d, 0x74, 0x7f, 0x06, 0x9b, 0xf6, 0x7b, 0x2b, 0xa8, 0x95,
	0xdd, 0x71, 0x73, 0xab, 0x61, 0x06, 0x0f, 0x8d, 0x36, 0x2b, 0x67, 0x3d, 0x15, 0xce, 0x2f, 0x0b,
	0x17, 0xfe, 0x08, 0xe4, 0x92, 0x26, 0x72, 0xd5, 0xf9, 0xc2, 0xcf, 0x60, 0x7f, 0x06, 0x57, 0x64,
	0x2c, 0x15, 0xa8, 0x69, 0x48, 0x2a, 0x73, 0xa1, 0x21, 0xd7, 0x23, 0xeb, 0x85, 0x3f, 0x03, 0xb9,
	0xe4, 0x89, 0xc4, 0xbe, 0xe4, 0x48, 0xc7, 0xab, 0x2b, 0x9b, 0x40, 0x2d, 0xa6, 0x92, 0xea, 0xa2,
	0xb7, 0x23, 0x6d, 0x87, 0xcf, 0x60, 0x7f, 0x26, 0x97, 0xa5, 0xb6, 0x0b, 0xfe, 0x08, 0x53, 0x9d,
	0xa3, 0x19, 0x29, 0x33, 0x1c, 0xc2, 0x5e, 0x84, 0x34, 0x5e, 0x35, 0x27, 0x9b, 0xc8, 0x9f, 0x26,
	0xea, 0x00, 0x29, 0x27, 0xb2, 0x84, 0x1c, 0x77, 0xaf, 0xc4, 0xfd, 0x02, 0xf6, 0x7a, 0x23, 0x26,
	0xb0, 0x2f, 0xe3, 0x24, 0x5d, 0xdd, 0x69, 0xfd, 0xee, 0xc1, 0xfe, 0x0f, 0x72, 0x72, 0xa9, 0x30,
	0x45, 0xf2, 0x1b, 0xae, 0xb4, 0x58, 0xce, 0x6e, 0x5d, 0xb1, 0x9c, 0xdd, 0xaa, 0x2b, 0x30, 0x60,
	0xa3, 0x7c, 0x9c, 0xea, 0x7f, 0xa1, 0x19, 0x59, 0x2f, 0xfc, 0xd3, 0x83, 0x87, 0xa6, 0x1b, 0xf6,
	0x69, 0x1a, 0x5f, 0xb3, 0x77, 0x8e, 0x44, 0x0b, 0xb6, 0xde, 0x30, 0x21, 0x53, 0x3a, 0x46, 0x4b,
	0xa0, 0xf0, 0x15, 0x7c, 0x9c, 0x8a, 0x60, 0xad, 0xed, 0x77, 0xea, 0x91, 0x32, 0x3f, 0xa4, 0xc7,
	0x3d, 0x85, 0xa6, 0x30, 0xa9, 0xae, 0xb2, 0x44, 0xc1, 0xd4, 0x74, 0xfb, 0xd8, 0xb6, 0xc1, 0x73,
	0x15, 0x0b, 0x1f, 0xc1, 0xc1, 0xb7, 0x28, 0x24, 0x67, 0x93, 0x59, 0x5a, 0xe1, 0x0b, 0xa8, 0x9f,
	0x65, 0xc7, 0x71, 0xcc, 0x51, 0x08, 0x12, 0xc0, 0x26, 0x35, 0xa6, 0xa5, 0xe8, 0x5c, 0x75, 0x8a,
	0x63, 0x2a, 0x7e, 0xb1, 0xca, 0x68, 0x3b, 0xfc, 0xcb, 0x83, 0xc3, 0x8b, 0x2c, 0xa6, 0x12, 0xcf,
	0x52, 0x89, 0xfc, 0x86, 0x0e, 0x0a, 0xc5, 0x09, 0xd4, 0xe4, 0x24, 0x33, 0x85, 0xd6, 0x22, 0x6d,
	0x2b, 0xc5, 0x62, 0x7c, 0x9b, 0x0c, 0xd0, 0x82, 0x58, 0x4f, 0x25, 0x4d, 0xf1, 0xf6, 0x7b, 0xa5,
	0x8b, 0x6f, 0x92, 0x5a, 0x57, 0xf5, 0xa8, 0xc4, 0x71, 0x43, 0x55, 0x97, 0xd2, 0x61, 0xc7, 0xe8,
	0x50, 0x90, 0x8e, 0xca, 0x7b, 0x94, 0x92, 0x63, 0x99, 0x07, 0xeb, 0x3a, 0xaf, 0x32, 0xc3, 0x2f,
	0x61, 0xe7, 0x38, 0x8e, 0x23, 0x96, 0xcb, 0x82, 0xdd, 0x53, 0xd8, 0xe0, 0xca, 0x57, 0x55, 0x2a,
	0xc8, 0x86, 0x81, 0x34, 0x7b, 0xec, 0x52, 0x78, 0x00, 0xfb, 0xaf, 0xd3, 0x51, 0x92, 0x62, 0xef,
	0xfc, 0xe2, 0x15, 0xba, 0x1f, 0x27, 0xfc, 0xc3, 0x83, 0x4d, 0x7b, 0x06, 0xba, 0x22, 0x9e, 0xbc,
	0x45, 0x6e, 0xd5, 0xb2, 0x9e, 0x6e, 0x0f, 0x2c, 0xe7, 0xd3, 0x4a, 0x8d, 0xa7, 0xe2, 0x37, 0x42,
	0xeb, 0x62, 0x0a, 0xb5, 0x9e, 0x52, 0x80, 0x65, 0x32, 0x61, 0xa9, 0xa9, 0xb1, 0x1e, 0x39, 0x97,
	0x7c, 0x04, 0x8d, 0x31, 0xcb, 0x53, 0x79, 0x95, 0xb1, 0x24, 0x95, 0xba, 0xac, 0x7a, 0x04, 0x3a,
	0x74, 0xae, 0x22, 0xe1, 0x4f, 0x00, 0xd3, 0x6e, 0xad, 0xaa, 0xcf, 0x8b, 0xfb, 0xad, 0x4c, 0x15,
	0x19, 0x16, 0x17, 0x5a, 0x99, 0xe4, 0x13, 0x78, 0x40, 0xe3, 0x38, 0x51, 0xf8, 0x74, 0x74, 0x9a,
	0xc4, 0xe6, 0x7e, 0xd5, 0xa3, 0xb9, 0x68, 0xf8, 0x0a, 0xd6, 0xb5, 0x20, 0xfa, 0x07, 0x46, 0x21,
	0x2d, 0xaa, 0xb6, 0x15, 0xe3, 0x21, 0x95, 0x78, 0x4b, 0x27, 0x16, 0xda, 0xb9, 0xa5, 0x53, 0xf6,
	0xcb, 0xa7, 0x7c, 0xf4, 0xef, 0x16, 0xec, 0x7d, 0x57, 0x3c, 0x34, 0xfa, 0xc8, 0xf5, 0xd9, 0x9f,
	0xc2, 0xce, 0xdc, 0xd3, 0x81, 0x3c, 0x31, 0x87, 0x51, 0xfd, 0xa2, 0x68, 0x1d, 0x76, 0xcd, 0x53,
	0xa4, 0xeb, 0x9e, 0x22, 0xdd, 0x13, 0xf5, 0x14, 0x21, 0x27, 0xf0, 0x60, 0x76, 0x94, 0x93, 0xc7,
	0xee, 0x7f, 0xa9, 0x18, 0xf0, 0x4b, 0x61, 0x4e, 0x61, 0x67, 0x6e, 0xaa, 0x3b, 0x3e, 0xd5, 0xc3,
	0x7e, 0x29, 0xd0, 0x4b, 0x68, 0x94, 0xc6, 0x36, 0x09, 0x0c, 0xc8, 0xe2, 0x24, 0x5f, 0x0a, 0xd0,
	0x83, 0xe6, 0xcc, 0x0c, 0x25, 0xad, 0x32, 0x8f, 0xf7, 0x04, 0xf9, 0x06, 0x1a, 0xa5, 0xf1, 0xe5,
	0x58, 0x2c, 0x4e, 0xca, 0xd6, 0xff, 0x2a, 0x56, 0x6c, 0xff, 0x3e, 0x06, 0xb0, 0x73, 0x26, 0x4e,
	0xd2, 0x02, 0x62, 0x61, 0xca, 0x15, 0x10, 0x15, 0x33, 0xe9, 0x25, 0x80, 0x19, 0x0c, 0x31, 0xcb,
	0x25, 0x79, 0x64, 0xff, 0xb6, 0xf9, 0x99, 0xd4, 0x0a, 0x16, 0x17, 0x16, 0x00, 0x90, 0xf3, 0xfb,
	0x00, 0x7c, 0x0d, 0x30, 0x1d, 0x38, 0x0e, 0x60, 0x61, 0x04, 0x2d, 0xd5, 0xf1, 0x18, 0xb6, 0xcb,
	0x73, 0x85, 0xd8, 0x5a, 0x2b, 0x66, 0xcd, 0x5d, 0xe7, 0x39, 0x33, 0x16, 0xdc, 0x79, 0x56, 0xcd,
	0x8a, 0xbb, 0x6e, 0xf9, 0x6c, 0x17, 0x77, 0xb7, 0xbc, 0xb2, 0xb7, 0xdf, 0x75, 0xcb, 0xe7, 0xfa,
	0xb6, 0xbb, 0xe5, 0xd5, 0xed, 0x7c, 0x29, 0xd0, 0x0b, 0xd8, 0x72, 0xbd, 0x95, 0x1c, 0x18, 0x84,
	0xb9, 0x5e, 0x7b, 0x97, 0xa4, 0xe5, 0xf6, 0xea, 0x24, 0xad, 0x68, 0xb9, 0xcb, 0x20, 0xae, 0x37,
	0xb4, 0xff, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x62, 0x6f, 0x77, 0xc1, 0x0c, 0x00,
	0x00,
}
