// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oci.proto

package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Spec struct {
	// Version of the Open Container Initiative Runtime Specification with which the bundle complies.
	Version string `protobuf:"bytes,1,opt,name=Version,json=version,proto3" json:"Version,omitempty"`
	// Process configures the container process.
	Process *Process `protobuf:"bytes,2,opt,name=Process,json=process" json:"Process,omitempty"`
	// Root configures the container's root filesystem.
	Root *Root `protobuf:"bytes,3,opt,name=Root,json=root" json:"Root,omitempty"`
	// Hostname configures the container's hostname.
	Hostname string `protobuf:"bytes,4,opt,name=Hostname,json=hostname,proto3" json:"Hostname,omitempty"`
	// Mounts configures additional mounts (on top of Root).
	Mounts []Mount `protobuf:"bytes,5,rep,name=Mounts,json=mounts" json:"Mounts"`
	// Hooks configures callbacks for container lifecycle events.
	Hooks *Hooks `protobuf:"bytes,6,opt,name=Hooks,json=hooks" json:"Hooks,omitempty"`
	// Annotations contains arbitrary metadata for the container.
	Annotations map[string]string `protobuf:"bytes,7,rep,name=Annotations,json=annotations" json:"Annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Linux is platform-specific configuration for Linux based containers.
	Linux *Linux `protobuf:"bytes,8,opt,name=Linux,json=linux" json:"Linux,omitempty"`
	// Solaris is platform-specific configuration for Solaris based containers.
	Solaris *Solaris `protobuf:"bytes,9,opt,name=Solaris,json=solaris" json:"Solaris,omitempty"`
	// Windows is platform-specific configuration for Windows based containers.
	Windows *Windows `protobuf:"bytes,10,opt,name=Windows,json=windows" json:"Windows,omitempty"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{0} }

func (m *Spec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Spec) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *Spec) GetRoot() *Root {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Spec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Spec) GetMounts() []Mount {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *Spec) GetHooks() *Hooks {
	if m != nil {
		return m.Hooks
	}
	return nil
}

func (m *Spec) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Spec) GetLinux() *Linux {
	if m != nil {
		return m.Linux
	}
	return nil
}

func (m *Spec) GetSolaris() *Solaris {
	if m != nil {
		return m.Solaris
	}
	return nil
}

func (m *Spec) GetWindows() *Windows {
	if m != nil {
		return m.Windows
	}
	return nil
}

type Process struct {
	// Terminal creates an interactive terminal for the container.
	Terminal bool `protobuf:"varint,1,opt,name=Terminal,json=terminal,proto3" json:"Terminal,omitempty"`
	// ConsoleSize specifies the size of the console.
	ConsoleSize *Box `protobuf:"bytes,2,opt,name=ConsoleSize,json=consoleSize" json:"ConsoleSize,omitempty"`
	// User specifies user information for the process.
	User User `protobuf:"bytes,3,opt,name=User,json=user" json:"User"`
	// Args specifies the binary and arguments for the application to execute.
	Args []string `protobuf:"bytes,4,rep,name=Args,json=args" json:"Args,omitempty"`
	// Env populates the process environment for the process.
	Env []string `protobuf:"bytes,5,rep,name=Env,json=env" json:"Env,omitempty"`
	// Cwd is the current working directory for the process and must be
	// relative to the container's root.
	Cwd string `protobuf:"bytes,6,opt,name=Cwd,json=cwd,proto3" json:"Cwd,omitempty"`
	// Capabilities are Linux capabilities that are kept for the process.
	Capabilities *LinuxCapabilities `protobuf:"bytes,7,opt,name=Capabilities,json=capabilities" json:"Capabilities,omitempty"`
	// Rlimits specifies rlimit options to apply to the process.
	Rlimits []POSIXRlimit `protobuf:"bytes,8,rep,name=Rlimits,json=rlimits" json:"Rlimits"`
	// NoNewPrivileges controls whether additional privileges could be gained by processes in the container.
	NoNewPrivileges bool `protobuf:"varint,9,opt,name=NoNewPrivileges,json=noNewPrivileges,proto3" json:"NoNewPrivileges,omitempty"`
	// ApparmorProfile specifies the apparmor profile for the container.
	ApparmorProfile string `protobuf:"bytes,10,opt,name=ApparmorProfile,json=apparmorProfile,proto3" json:"ApparmorProfile,omitempty"`
	// Specify an oom_score_adj for the container.
	OOMScoreAdj int64 `protobuf:"varint,11,opt,name=OOMScoreAdj,json=oOMScoreAdj,proto3" json:"OOMScoreAdj,omitempty"`
	// SelinuxLabel specifies the selinux context that the container process is run as.
	SelinuxLabel string `protobuf:"bytes,12,opt,name=SelinuxLabel,json=selinuxLabel,proto3" json:"SelinuxLabel,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{1} }

func (m *Process) GetTerminal() bool {
	if m != nil {
		return m.Terminal
	}
	return false
}

func (m *Process) GetConsoleSize() *Box {
	if m != nil {
		return m.ConsoleSize
	}
	return nil
}

func (m *Process) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

func (m *Process) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Process) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Process) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *Process) GetCapabilities() *LinuxCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Process) GetRlimits() []POSIXRlimit {
	if m != nil {
		return m.Rlimits
	}
	return nil
}

func (m *Process) GetNoNewPrivileges() bool {
	if m != nil {
		return m.NoNewPrivileges
	}
	return false
}

func (m *Process) GetApparmorProfile() string {
	if m != nil {
		return m.ApparmorProfile
	}
	return ""
}

func (m *Process) GetOOMScoreAdj() int64 {
	if m != nil {
		return m.OOMScoreAdj
	}
	return 0
}

func (m *Process) GetSelinuxLabel() string {
	if m != nil {
		return m.SelinuxLabel
	}
	return ""
}

type Box struct {
	// Height is the vertical dimension of a box.
	Height uint32 `protobuf:"varint,1,opt,name=Height,json=height,proto3" json:"Height,omitempty"`
	// Width is the horizontal dimension of a box.
	Width uint32 `protobuf:"varint,2,opt,name=Width,json=width,proto3" json:"Width,omitempty"`
}

func (m *Box) Reset()                    { *m = Box{} }
func (m *Box) String() string            { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()               {}
func (*Box) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{2} }

func (m *Box) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Box) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

type User struct {
	// UID is the user id.
	UID uint32 `protobuf:"varint,1,opt,name=UID,json=uID,proto3" json:"UID,omitempty"`
	// GID is the group id.
	GID uint32 `protobuf:"varint,2,opt,name=GID,json=gID,proto3" json:"GID,omitempty"`
	// AdditionalGids are additional group ids set for the container's process.
	AdditionalGids []uint32 `protobuf:"varint,3,rep,packed,name=AdditionalGids,json=additionalGids" json:"AdditionalGids,omitempty"`
	// Username is the user name.
	Username string `protobuf:"bytes,4,opt,name=Username,json=username,proto3" json:"Username,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{3} }

func (m *User) GetUID() uint32 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *User) GetGID() uint32 {
	if m != nil {
		return m.GID
	}
	return 0
}

func (m *User) GetAdditionalGids() []uint32 {
	if m != nil {
		return m.AdditionalGids
	}
	return nil
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type LinuxCapabilities struct {
	// Bounding is the set of capabilities checked by the kernel.
	Bounding []string `protobuf:"bytes,1,rep,name=Bounding,json=bounding" json:"Bounding,omitempty"`
	// Effective is the set of capabilities checked by the kernel.
	Effective []string `protobuf:"bytes,2,rep,name=Effective,json=effective" json:"Effective,omitempty"`
	// Inheritable is the capabilities preserved across execve.
	Inheritable []string `protobuf:"bytes,3,rep,name=Inheritable,json=inheritable" json:"Inheritable,omitempty"`
	// Permitted is the limiting superset for effective capabilities.
	Permitted []string `protobuf:"bytes,4,rep,name=Permitted,json=permitted" json:"Permitted,omitempty"`
	// Ambient is the ambient set of capabilities that are kept.
	Ambient []string `protobuf:"bytes,5,rep,name=Ambient,json=ambient" json:"Ambient,omitempty"`
}

func (m *LinuxCapabilities) Reset()                    { *m = LinuxCapabilities{} }
func (m *LinuxCapabilities) String() string            { return proto.CompactTextString(m) }
func (*LinuxCapabilities) ProtoMessage()               {}
func (*LinuxCapabilities) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{4} }

func (m *LinuxCapabilities) GetBounding() []string {
	if m != nil {
		return m.Bounding
	}
	return nil
}

func (m *LinuxCapabilities) GetEffective() []string {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (m *LinuxCapabilities) GetInheritable() []string {
	if m != nil {
		return m.Inheritable
	}
	return nil
}

func (m *LinuxCapabilities) GetPermitted() []string {
	if m != nil {
		return m.Permitted
	}
	return nil
}

func (m *LinuxCapabilities) GetAmbient() []string {
	if m != nil {
		return m.Ambient
	}
	return nil
}

type POSIXRlimit struct {
	// Type of the rlimit to set
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	// Hard is the hard limit for the specified type
	Hard uint64 `protobuf:"varint,2,opt,name=Hard,json=hard,proto3" json:"Hard,omitempty"`
	// Soft is the soft limit for the specified type
	Soft uint64 `protobuf:"varint,3,opt,name=Soft,json=soft,proto3" json:"Soft,omitempty"`
}

func (m *POSIXRlimit) Reset()                    { *m = POSIXRlimit{} }
func (m *POSIXRlimit) String() string            { return proto.CompactTextString(m) }
func (*POSIXRlimit) ProtoMessage()               {}
func (*POSIXRlimit) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{5} }

func (m *POSIXRlimit) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *POSIXRlimit) GetHard() uint64 {
	if m != nil {
		return m.Hard
	}
	return 0
}

func (m *POSIXRlimit) GetSoft() uint64 {
	if m != nil {
		return m.Soft
	}
	return 0
}

type Mount struct {
	// destination is the path inside the container expect when it starts with "tmp:/"
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// source is the path inside the container expect when it starts with "vm:/dev/" or "tmp:/"
	// the path which starts with "vm:/dev/" refers the guest vm's "/dev",
	// especially, "vm:/dev/hostfs/" refers to the shared filesystem.
	// "tmp:/" is a temporary directory which is used for temporary mounts.
	Source  string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Options []string `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
}

func (m *Mount) Reset()                    { *m = Mount{} }
func (m *Mount) String() string            { return proto.CompactTextString(m) }
func (*Mount) ProtoMessage()               {}
func (*Mount) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{6} }

func (m *Mount) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Mount) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Mount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Mount) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type Root struct {
	// Path is the absolute path to the container's root filesystem.
	Path string `protobuf:"bytes,1,opt,name=Path,json=path,proto3" json:"Path,omitempty"`
	// Readonly makes the root filesystem for the container readonly before the process is executed.
	Readonly bool `protobuf:"varint,2,opt,name=Readonly,json=readonly,proto3" json:"Readonly,omitempty"`
}

func (m *Root) Reset()                    { *m = Root{} }
func (m *Root) String() string            { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()               {}
func (*Root) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{7} }

func (m *Root) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Root) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

type Hooks struct {
	// Prestart is a list of hooks to be run before the container process is executed.
	Prestart []Hook `protobuf:"bytes,1,rep,name=Prestart,json=prestart" json:"Prestart"`
	// Poststart is a list of hooks to be run after the container process is started.
	Poststart []Hook `protobuf:"bytes,2,rep,name=Poststart,json=poststart" json:"Poststart"`
	// Poststop is a list of hooks to be run after the container process exits.
	Poststop []Hook `protobuf:"bytes,3,rep,name=Poststop,json=poststop" json:"Poststop"`
}

func (m *Hooks) Reset()                    { *m = Hooks{} }
func (m *Hooks) String() string            { return proto.CompactTextString(m) }
func (*Hooks) ProtoMessage()               {}
func (*Hooks) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{8} }

func (m *Hooks) GetPrestart() []Hook {
	if m != nil {
		return m.Prestart
	}
	return nil
}

func (m *Hooks) GetPoststart() []Hook {
	if m != nil {
		return m.Poststart
	}
	return nil
}

func (m *Hooks) GetPoststop() []Hook {
	if m != nil {
		return m.Poststop
	}
	return nil
}

type Hook struct {
	Path    string   `protobuf:"bytes,1,opt,name=Path,json=path,proto3" json:"Path,omitempty"`
	Args    []string `protobuf:"bytes,2,rep,name=Args,json=args" json:"Args,omitempty"`
	Env     []string `protobuf:"bytes,3,rep,name=Env,json=env" json:"Env,omitempty"`
	Timeout int64    `protobuf:"varint,4,opt,name=Timeout,json=timeout,proto3" json:"Timeout,omitempty"`
}

func (m *Hook) Reset()                    { *m = Hook{} }
func (m *Hook) String() string            { return proto.CompactTextString(m) }
func (*Hook) ProtoMessage()               {}
func (*Hook) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{9} }

func (m *Hook) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Hook) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Hook) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Hook) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type Linux struct {
	// UIDMapping specifies user mappings for supporting user namespaces.
	UIDMappings []LinuxIDMapping `protobuf:"bytes,1,rep,name=UIDMappings,json=uIDMappings" json:"UIDMappings"`
	// GIDMapping specifies group mappings for supporting user namespaces.
	GIDMappings []LinuxIDMapping `protobuf:"bytes,2,rep,name=GIDMappings,json=gIDMappings" json:"GIDMappings"`
	// Sysctl are a set of key value pairs that are set for the container on start
	Sysctl map[string]string `protobuf:"bytes,3,rep,name=Sysctl,json=sysctl" json:"Sysctl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Resources contain cgroup information for handling resource constraints
	// for the container
	Resources *LinuxResources `protobuf:"bytes,4,opt,name=Resources,json=resources" json:"Resources,omitempty"`
	// CgroupsPath specifies the path to cgroups that are created and/or joined by the container.
	// The path is expected to be relative to the cgroups mountpoint.
	// If resources are specified, the cgroups at CgroupsPath will be updated based on resources.
	CgroupsPath string `protobuf:"bytes,5,opt,name=CgroupsPath,json=cgroupsPath,proto3" json:"CgroupsPath,omitempty"`
	// Namespaces contains the namespaces that are created and/or joined by the container
	Namespaces []LinuxNamespace `protobuf:"bytes,6,rep,name=Namespaces,json=namespaces" json:"Namespaces"`
	// Devices are a list of device nodes that are created for the container
	Devices []LinuxDevice `protobuf:"bytes,7,rep,name=Devices,json=devices" json:"Devices"`
	// Seccomp specifies the seccomp security settings for the container.
	Seccomp *LinuxSeccomp `protobuf:"bytes,8,opt,name=Seccomp,json=seccomp" json:"Seccomp,omitempty"`
	// RootfsPropagation is the rootfs mount propagation mode for the container.
	RootfsPropagation string `protobuf:"bytes,9,opt,name=RootfsPropagation,json=rootfsPropagation,proto3" json:"RootfsPropagation,omitempty"`
	// MaskedPaths masks over the provided paths inside the container.
	MaskedPaths []string `protobuf:"bytes,10,rep,name=MaskedPaths,json=maskedPaths" json:"MaskedPaths,omitempty"`
	// ReadonlyPaths sets the provided paths as RO inside the container.
	ReadonlyPaths []string `protobuf:"bytes,11,rep,name=ReadonlyPaths,json=readonlyPaths" json:"ReadonlyPaths,omitempty"`
	// MountLabel specifies the selinux context for the mounts in the container.
	MountLabel string `protobuf:"bytes,12,opt,name=MountLabel,json=mountLabel,proto3" json:"MountLabel,omitempty"`
	// IntelRdt contains Intel Resource Director Technology (RDT) information
	// for handling resource constraints (e.g., L3 cache) for the container
	IntelRdt *LinuxIntelRdt `protobuf:"bytes,13,opt,name=IntelRdt,json=intelRdt" json:"IntelRdt,omitempty"`
}

func (m *Linux) Reset()                    { *m = Linux{} }
func (m *Linux) String() string            { return proto.CompactTextString(m) }
func (*Linux) ProtoMessage()               {}
func (*Linux) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{10} }

func (m *Linux) GetUIDMappings() []LinuxIDMapping {
	if m != nil {
		return m.UIDMappings
	}
	return nil
}

func (m *Linux) GetGIDMappings() []LinuxIDMapping {
	if m != nil {
		return m.GIDMappings
	}
	return nil
}

func (m *Linux) GetSysctl() map[string]string {
	if m != nil {
		return m.Sysctl
	}
	return nil
}

func (m *Linux) GetResources() *LinuxResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Linux) GetCgroupsPath() string {
	if m != nil {
		return m.CgroupsPath
	}
	return ""
}

func (m *Linux) GetNamespaces() []LinuxNamespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *Linux) GetDevices() []LinuxDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Linux) GetSeccomp() *LinuxSeccomp {
	if m != nil {
		return m.Seccomp
	}
	return nil
}

func (m *Linux) GetRootfsPropagation() string {
	if m != nil {
		return m.RootfsPropagation
	}
	return ""
}

func (m *Linux) GetMaskedPaths() []string {
	if m != nil {
		return m.MaskedPaths
	}
	return nil
}

func (m *Linux) GetReadonlyPaths() []string {
	if m != nil {
		return m.ReadonlyPaths
	}
	return nil
}

func (m *Linux) GetMountLabel() string {
	if m != nil {
		return m.MountLabel
	}
	return ""
}

func (m *Linux) GetIntelRdt() *LinuxIntelRdt {
	if m != nil {
		return m.IntelRdt
	}
	return nil
}

type Windows struct {
	// Dummy string, never used.
	Dummy string `protobuf:"bytes,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (m *Windows) Reset()                    { *m = Windows{} }
func (m *Windows) String() string            { return proto.CompactTextString(m) }
func (*Windows) ProtoMessage()               {}
func (*Windows) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{11} }

func (m *Windows) GetDummy() string {
	if m != nil {
		return m.Dummy
	}
	return ""
}

type Solaris struct {
	// Dummy string, never used.
	Dummy string `protobuf:"bytes,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (m *Solaris) Reset()                    { *m = Solaris{} }
func (m *Solaris) String() string            { return proto.CompactTextString(m) }
func (*Solaris) ProtoMessage()               {}
func (*Solaris) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{12} }

func (m *Solaris) GetDummy() string {
	if m != nil {
		return m.Dummy
	}
	return ""
}

type LinuxIDMapping struct {
	// HostID is the starting UID/GID on the host to be mapped to 'ContainerID'
	HostID uint32 `protobuf:"varint,1,opt,name=HostID,json=hostID,proto3" json:"HostID,omitempty"`
	// ContainerID is the starting UID/GID in the container
	ContainerID uint32 `protobuf:"varint,2,opt,name=ContainerID,json=containerID,proto3" json:"ContainerID,omitempty"`
	// Size is the number of IDs to be mapped
	Size_ uint32 `protobuf:"varint,3,opt,name=Size,json=size,proto3" json:"Size,omitempty"`
}

func (m *LinuxIDMapping) Reset()                    { *m = LinuxIDMapping{} }
func (m *LinuxIDMapping) String() string            { return proto.CompactTextString(m) }
func (*LinuxIDMapping) ProtoMessage()               {}
func (*LinuxIDMapping) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{13} }

func (m *LinuxIDMapping) GetHostID() uint32 {
	if m != nil {
		return m.HostID
	}
	return 0
}

func (m *LinuxIDMapping) GetContainerID() uint32 {
	if m != nil {
		return m.ContainerID
	}
	return 0
}

func (m *LinuxIDMapping) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type LinuxNamespace struct {
	// Type is the type of namespace
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	// Path is a path to an existing namespace persisted on disk that can be joined
	// and is of the same type
	Path string `protobuf:"bytes,2,opt,name=Path,json=path,proto3" json:"Path,omitempty"`
}

func (m *LinuxNamespace) Reset()                    { *m = LinuxNamespace{} }
func (m *LinuxNamespace) String() string            { return proto.CompactTextString(m) }
func (*LinuxNamespace) ProtoMessage()               {}
func (*LinuxNamespace) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{14} }

func (m *LinuxNamespace) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LinuxNamespace) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type LinuxDevice struct {
	// Path to the device.
	Path string `protobuf:"bytes,1,opt,name=Path,json=path,proto3" json:"Path,omitempty"`
	// Device type, block, char, etc.
	Type string `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,3,opt,name=Major,json=major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,4,opt,name=Minor,json=minor,proto3" json:"Minor,omitempty"`
	// FileMode permission bits for the device.
	FileMode uint32 `protobuf:"varint,5,opt,name=FileMode,json=fileMode,proto3" json:"FileMode,omitempty"`
	// UID of the device.
	UID uint32 `protobuf:"varint,6,opt,name=UID,json=uID,proto3" json:"UID,omitempty"`
	// Gid of the device.
	GID uint32 `protobuf:"varint,7,opt,name=GID,json=gID,proto3" json:"GID,omitempty"`
}

func (m *LinuxDevice) Reset()                    { *m = LinuxDevice{} }
func (m *LinuxDevice) String() string            { return proto.CompactTextString(m) }
func (*LinuxDevice) ProtoMessage()               {}
func (*LinuxDevice) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{15} }

func (m *LinuxDevice) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *LinuxDevice) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LinuxDevice) GetMajor() int64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *LinuxDevice) GetMinor() int64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *LinuxDevice) GetFileMode() uint32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *LinuxDevice) GetUID() uint32 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *LinuxDevice) GetGID() uint32 {
	if m != nil {
		return m.GID
	}
	return 0
}

type LinuxResources struct {
	// Devices configures the device whitelist.
	Devices []LinuxDeviceCgroup `protobuf:"bytes,1,rep,name=Devices,json=devices" json:"Devices"`
	// Memory restriction configuration
	Memory *LinuxMemory `protobuf:"bytes,2,opt,name=Memory,json=memory" json:"Memory,omitempty"`
	// CPU resource restriction configuration
	CPU *LinuxCPU `protobuf:"bytes,3,opt,name=CPU,json=cPU" json:"CPU,omitempty"`
	// Task resource restriction configuration.
	Pids *LinuxPids `protobuf:"bytes,4,opt,name=Pids,json=pids" json:"Pids,omitempty"`
	// BlockIO restriction configuration
	BlockIO *LinuxBlockIO `protobuf:"bytes,5,opt,name=BlockIO,json=blockIO" json:"BlockIO,omitempty"`
	// Hugetlb limit (in bytes)
	HugepageLimits []LinuxHugepageLimit `protobuf:"bytes,6,rep,name=HugepageLimits,json=hugepageLimits" json:"HugepageLimits"`
	// Network restriction configuration
	Network *LinuxNetwork `protobuf:"bytes,7,opt,name=Network,json=network" json:"Network,omitempty"`
}

func (m *LinuxResources) Reset()                    { *m = LinuxResources{} }
func (m *LinuxResources) String() string            { return proto.CompactTextString(m) }
func (*LinuxResources) ProtoMessage()               {}
func (*LinuxResources) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{16} }

func (m *LinuxResources) GetDevices() []LinuxDeviceCgroup {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *LinuxResources) GetMemory() *LinuxMemory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *LinuxResources) GetCPU() *LinuxCPU {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *LinuxResources) GetPids() *LinuxPids {
	if m != nil {
		return m.Pids
	}
	return nil
}

func (m *LinuxResources) GetBlockIO() *LinuxBlockIO {
	if m != nil {
		return m.BlockIO
	}
	return nil
}

func (m *LinuxResources) GetHugepageLimits() []LinuxHugepageLimit {
	if m != nil {
		return m.HugepageLimits
	}
	return nil
}

func (m *LinuxResources) GetNetwork() *LinuxNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

type LinuxMemory struct {
	// Memory limit (in bytes).
	Limit int64 `protobuf:"varint,1,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	// Memory reservation or soft_limit (in bytes).
	Reservation int64 `protobuf:"varint,2,opt,name=Reservation,json=reservation,proto3" json:"Reservation,omitempty"`
	// Total memory limit (memory + swap).
	Swap int64 `protobuf:"varint,3,opt,name=Swap,json=swap,proto3" json:"Swap,omitempty"`
	// Kernel memory limit (in bytes).
	Kernel int64 `protobuf:"varint,4,opt,name=Kernel,json=kernel,proto3" json:"Kernel,omitempty"`
	// Kernel memory limit for tcp (in bytes)
	KernelTCP int64 `protobuf:"varint,5,opt,name=KernelTCP,json=kernelTCP,proto3" json:"KernelTCP,omitempty"`
	// How aggressive the kernel will swap memory pages.
	Swappiness uint64 `protobuf:"varint,6,opt,name=Swappiness,json=swappiness,proto3" json:"Swappiness,omitempty"`
	// DisableOOMKiller disables the OOM killer for out of memory conditions
	DisableOOMKiller bool `protobuf:"varint,7,opt,name=DisableOOMKiller,json=disableOOMKiller,proto3" json:"DisableOOMKiller,omitempty"`
}

func (m *LinuxMemory) Reset()                    { *m = LinuxMemory{} }
func (m *LinuxMemory) String() string            { return proto.CompactTextString(m) }
func (*LinuxMemory) ProtoMessage()               {}
func (*LinuxMemory) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{17} }

func (m *LinuxMemory) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *LinuxMemory) GetReservation() int64 {
	if m != nil {
		return m.Reservation
	}
	return 0
}

func (m *LinuxMemory) GetSwap() int64 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *LinuxMemory) GetKernel() int64 {
	if m != nil {
		return m.Kernel
	}
	return 0
}

func (m *LinuxMemory) GetKernelTCP() int64 {
	if m != nil {
		return m.KernelTCP
	}
	return 0
}

func (m *LinuxMemory) GetSwappiness() uint64 {
	if m != nil {
		return m.Swappiness
	}
	return 0
}

func (m *LinuxMemory) GetDisableOOMKiller() bool {
	if m != nil {
		return m.DisableOOMKiller
	}
	return false
}

type LinuxCPU struct {
	// CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
	Shares uint64 `protobuf:"varint,1,opt,name=Shares,json=shares,proto3" json:"Shares,omitempty"`
	// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
	Quota int64 `protobuf:"varint,2,opt,name=Quota,json=quota,proto3" json:"Quota,omitempty"`
	// CPU period to be used for hardcapping (in usecs).
	Period uint64 `protobuf:"varint,3,opt,name=Period,json=period,proto3" json:"Period,omitempty"`
	// How much time realtime scheduling may use (in usecs).
	RealtimeRuntime int64 `protobuf:"varint,4,opt,name=RealtimeRuntime,json=realtimeRuntime,proto3" json:"RealtimeRuntime,omitempty"`
	// CPU period to be used for realtime scheduling (in usecs).
	RealtimePeriod uint64 `protobuf:"varint,5,opt,name=RealtimePeriod,json=realtimePeriod,proto3" json:"RealtimePeriod,omitempty"`
	// CPUs to use within the cpuset. Default is to use any CPU available.
	Cpus string `protobuf:"bytes,6,opt,name=Cpus,json=cpus,proto3" json:"Cpus,omitempty"`
	// List of memory nodes in the cpuset. Default is to use any available memory node.
	Mems string `protobuf:"bytes,7,opt,name=Mems,json=mems,proto3" json:"Mems,omitempty"`
}

func (m *LinuxCPU) Reset()                    { *m = LinuxCPU{} }
func (m *LinuxCPU) String() string            { return proto.CompactTextString(m) }
func (*LinuxCPU) ProtoMessage()               {}
func (*LinuxCPU) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{18} }

func (m *LinuxCPU) GetShares() uint64 {
	if m != nil {
		return m.Shares
	}
	return 0
}

func (m *LinuxCPU) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *LinuxCPU) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *LinuxCPU) GetRealtimeRuntime() int64 {
	if m != nil {
		return m.RealtimeRuntime
	}
	return 0
}

func (m *LinuxCPU) GetRealtimePeriod() uint64 {
	if m != nil {
		return m.RealtimePeriod
	}
	return 0
}

func (m *LinuxCPU) GetCpus() string {
	if m != nil {
		return m.Cpus
	}
	return ""
}

func (m *LinuxCPU) GetMems() string {
	if m != nil {
		return m.Mems
	}
	return ""
}

type LinuxWeightDevice struct {
	// Major is the device's major number.
	Major int64 `protobuf:"varint,1,opt,name=Major,json=major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,2,opt,name=Minor,json=minor,proto3" json:"Minor,omitempty"`
	// Weight is the bandwidth rate for the device.
	Weight uint32 `protobuf:"varint,3,opt,name=Weight,json=weight,proto3" json:"Weight,omitempty"`
	// LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, CFQ scheduler only
	LeafWeight uint32 `protobuf:"varint,4,opt,name=LeafWeight,json=leafWeight,proto3" json:"LeafWeight,omitempty"`
}

func (m *LinuxWeightDevice) Reset()                    { *m = LinuxWeightDevice{} }
func (m *LinuxWeightDevice) String() string            { return proto.CompactTextString(m) }
func (*LinuxWeightDevice) ProtoMessage()               {}
func (*LinuxWeightDevice) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{19} }

func (m *LinuxWeightDevice) GetMajor() int64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *LinuxWeightDevice) GetMinor() int64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *LinuxWeightDevice) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *LinuxWeightDevice) GetLeafWeight() uint32 {
	if m != nil {
		return m.LeafWeight
	}
	return 0
}

type LinuxThrottleDevice struct {
	// Major is the device's major number.
	Major int64 `protobuf:"varint,1,opt,name=Major,json=major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,2,opt,name=Minor,json=minor,proto3" json:"Minor,omitempty"`
	// Rate is the IO rate limit per cgroup per device
	Rate uint64 `protobuf:"varint,3,opt,name=Rate,json=rate,proto3" json:"Rate,omitempty"`
}

func (m *LinuxThrottleDevice) Reset()                    { *m = LinuxThrottleDevice{} }
func (m *LinuxThrottleDevice) String() string            { return proto.CompactTextString(m) }
func (*LinuxThrottleDevice) ProtoMessage()               {}
func (*LinuxThrottleDevice) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{20} }

func (m *LinuxThrottleDevice) GetMajor() int64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *LinuxThrottleDevice) GetMinor() int64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *LinuxThrottleDevice) GetRate() uint64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type LinuxBlockIO struct {
	// Specifies per cgroup weight
	Weight uint32 `protobuf:"varint,1,opt,name=Weight,json=weight,proto3" json:"Weight,omitempty"`
	// Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, CFQ scheduler only
	LeafWeight uint32 `protobuf:"varint,2,opt,name=LeafWeight,json=leafWeight,proto3" json:"LeafWeight,omitempty"`
	// Weight per cgroup per device, can override BlkioWeight
	WeightDevice []LinuxWeightDevice `protobuf:"bytes,3,rep,name=WeightDevice,json=weightDevice" json:"WeightDevice"`
	// IO read rate limit per cgroup per device, bytes per second
	ThrottleReadBpsDevice []LinuxThrottleDevice `protobuf:"bytes,4,rep,name=ThrottleReadBpsDevice,json=throttleReadBpsDevice" json:"ThrottleReadBpsDevice"`
	// IO write rate limit per cgroup per device, bytes per second
	ThrottleWriteBpsDevice []LinuxThrottleDevice `protobuf:"bytes,5,rep,name=ThrottleWriteBpsDevice,json=throttleWriteBpsDevice" json:"ThrottleWriteBpsDevice"`
	// IO read rate limit per cgroup per device, IO per second
	ThrottleReadIOPSDevice []LinuxThrottleDevice `protobuf:"bytes,6,rep,name=ThrottleReadIOPSDevice,json=throttleReadIOPSDevice" json:"ThrottleReadIOPSDevice"`
	// IO write rate limit per cgroup per device, IO per second
	ThrottleWriteIOPSDevice []LinuxThrottleDevice `protobuf:"bytes,7,rep,name=ThrottleWriteIOPSDevice,json=throttleWriteIOPSDevice" json:"ThrottleWriteIOPSDevice"`
}

func (m *LinuxBlockIO) Reset()                    { *m = LinuxBlockIO{} }
func (m *LinuxBlockIO) String() string            { return proto.CompactTextString(m) }
func (*LinuxBlockIO) ProtoMessage()               {}
func (*LinuxBlockIO) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{21} }

func (m *LinuxBlockIO) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *LinuxBlockIO) GetLeafWeight() uint32 {
	if m != nil {
		return m.LeafWeight
	}
	return 0
}

func (m *LinuxBlockIO) GetWeightDevice() []LinuxWeightDevice {
	if m != nil {
		return m.WeightDevice
	}
	return nil
}

func (m *LinuxBlockIO) GetThrottleReadBpsDevice() []LinuxThrottleDevice {
	if m != nil {
		return m.ThrottleReadBpsDevice
	}
	return nil
}

func (m *LinuxBlockIO) GetThrottleWriteBpsDevice() []LinuxThrottleDevice {
	if m != nil {
		return m.ThrottleWriteBpsDevice
	}
	return nil
}

func (m *LinuxBlockIO) GetThrottleReadIOPSDevice() []LinuxThrottleDevice {
	if m != nil {
		return m.ThrottleReadIOPSDevice
	}
	return nil
}

func (m *LinuxBlockIO) GetThrottleWriteIOPSDevice() []LinuxThrottleDevice {
	if m != nil {
		return m.ThrottleWriteIOPSDevice
	}
	return nil
}

type LinuxPids struct {
	// Maximum number of PIDs. Default is "no limit".
	Limit int64 `protobuf:"varint,1,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
}

func (m *LinuxPids) Reset()                    { *m = LinuxPids{} }
func (m *LinuxPids) String() string            { return proto.CompactTextString(m) }
func (*LinuxPids) ProtoMessage()               {}
func (*LinuxPids) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{22} }

func (m *LinuxPids) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type LinuxDeviceCgroup struct {
	// Allow or deny
	Allow bool `protobuf:"varint,1,opt,name=Allow,json=allow,proto3" json:"Allow,omitempty"`
	// Device type, block, char, etc.
	Type string `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,3,opt,name=Major,json=major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,4,opt,name=Minor,json=minor,proto3" json:"Minor,omitempty"`
	// Cgroup access permissions format, rwm.
	Access string `protobuf:"bytes,5,opt,name=Access,json=access,proto3" json:"Access,omitempty"`
}

func (m *LinuxDeviceCgroup) Reset()                    { *m = LinuxDeviceCgroup{} }
func (m *LinuxDeviceCgroup) String() string            { return proto.CompactTextString(m) }
func (*LinuxDeviceCgroup) ProtoMessage()               {}
func (*LinuxDeviceCgroup) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{23} }

func (m *LinuxDeviceCgroup) GetAllow() bool {
	if m != nil {
		return m.Allow
	}
	return false
}

func (m *LinuxDeviceCgroup) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LinuxDeviceCgroup) GetMajor() int64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *LinuxDeviceCgroup) GetMinor() int64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *LinuxDeviceCgroup) GetAccess() string {
	if m != nil {
		return m.Access
	}
	return ""
}

type LinuxNetwork struct {
	// Set class identifier for container's network packets
	ClassID uint32 `protobuf:"varint,1,opt,name=ClassID,json=classID,proto3" json:"ClassID,omitempty"`
	// Set priority of network traffic for container
	Priorities []LinuxInterfacePriority `protobuf:"bytes,2,rep,name=Priorities,json=priorities" json:"Priorities"`
}

func (m *LinuxNetwork) Reset()                    { *m = LinuxNetwork{} }
func (m *LinuxNetwork) String() string            { return proto.CompactTextString(m) }
func (*LinuxNetwork) ProtoMessage()               {}
func (*LinuxNetwork) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{24} }

func (m *LinuxNetwork) GetClassID() uint32 {
	if m != nil {
		return m.ClassID
	}
	return 0
}

func (m *LinuxNetwork) GetPriorities() []LinuxInterfacePriority {
	if m != nil {
		return m.Priorities
	}
	return nil
}

type LinuxHugepageLimit struct {
	// Pagesize is the hugepage size
	Pagesize string `protobuf:"bytes,1,opt,name=Pagesize,json=pagesize,proto3" json:"Pagesize,omitempty"`
	// Limit is the limit of "hugepagesize" hugetlb usage
	Limit uint64 `protobuf:"varint,2,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
}

func (m *LinuxHugepageLimit) Reset()                    { *m = LinuxHugepageLimit{} }
func (m *LinuxHugepageLimit) String() string            { return proto.CompactTextString(m) }
func (*LinuxHugepageLimit) ProtoMessage()               {}
func (*LinuxHugepageLimit) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{25} }

func (m *LinuxHugepageLimit) GetPagesize() string {
	if m != nil {
		return m.Pagesize
	}
	return ""
}

func (m *LinuxHugepageLimit) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type LinuxInterfacePriority struct {
	// Name is the name of the network interface
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	// Priority for the interface
	Priority uint32 `protobuf:"varint,2,opt,name=Priority,json=priority,proto3" json:"Priority,omitempty"`
}

func (m *LinuxInterfacePriority) Reset()                    { *m = LinuxInterfacePriority{} }
func (m *LinuxInterfacePriority) String() string            { return proto.CompactTextString(m) }
func (*LinuxInterfacePriority) ProtoMessage()               {}
func (*LinuxInterfacePriority) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{26} }

func (m *LinuxInterfacePriority) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LinuxInterfacePriority) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type LinuxSeccomp struct {
	DefaultAction string         `protobuf:"bytes,1,opt,name=DefaultAction,json=defaultAction,proto3" json:"DefaultAction,omitempty"`
	Architectures []string       `protobuf:"bytes,2,rep,name=Architectures,json=architectures" json:"Architectures,omitempty"`
	Syscalls      []LinuxSyscall `protobuf:"bytes,3,rep,name=Syscalls,json=syscalls" json:"Syscalls"`
}

func (m *LinuxSeccomp) Reset()                    { *m = LinuxSeccomp{} }
func (m *LinuxSeccomp) String() string            { return proto.CompactTextString(m) }
func (*LinuxSeccomp) ProtoMessage()               {}
func (*LinuxSeccomp) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{27} }

func (m *LinuxSeccomp) GetDefaultAction() string {
	if m != nil {
		return m.DefaultAction
	}
	return ""
}

func (m *LinuxSeccomp) GetArchitectures() []string {
	if m != nil {
		return m.Architectures
	}
	return nil
}

func (m *LinuxSeccomp) GetSyscalls() []LinuxSyscall {
	if m != nil {
		return m.Syscalls
	}
	return nil
}

type LinuxSeccompArg struct {
	Index    uint64 `protobuf:"varint,1,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	Value    uint64 `protobuf:"varint,2,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
	ValueTwo uint64 `protobuf:"varint,3,opt,name=ValueTwo,json=valueTwo,proto3" json:"ValueTwo,omitempty"`
	Op       string `protobuf:"bytes,4,opt,name=Op,json=op,proto3" json:"Op,omitempty"`
}

func (m *LinuxSeccompArg) Reset()                    { *m = LinuxSeccompArg{} }
func (m *LinuxSeccompArg) String() string            { return proto.CompactTextString(m) }
func (*LinuxSeccompArg) ProtoMessage()               {}
func (*LinuxSeccompArg) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{28} }

func (m *LinuxSeccompArg) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LinuxSeccompArg) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *LinuxSeccompArg) GetValueTwo() uint64 {
	if m != nil {
		return m.ValueTwo
	}
	return 0
}

func (m *LinuxSeccompArg) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

type LinuxSyscall struct {
	Names  []string          `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
	Action string            `protobuf:"bytes,2,opt,name=Action,json=action,proto3" json:"Action,omitempty"`
	Args   []LinuxSeccompArg `protobuf:"bytes,3,rep,name=Args,json=args" json:"Args"`
}

func (m *LinuxSyscall) Reset()                    { *m = LinuxSyscall{} }
func (m *LinuxSyscall) String() string            { return proto.CompactTextString(m) }
func (*LinuxSyscall) ProtoMessage()               {}
func (*LinuxSyscall) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{29} }

func (m *LinuxSyscall) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *LinuxSyscall) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *LinuxSyscall) GetArgs() []LinuxSeccompArg {
	if m != nil {
		return m.Args
	}
	return nil
}

type LinuxIntelRdt struct {
	// The schema for L3 cache id and capacity bitmask (CBM)
	// Format: "L3:<cache_id0>=<cbm0>;<cache_id1>=<cbm1>;..."
	L3CacheSchema string `protobuf:"bytes,1,opt,name=L3CacheSchema,json=l3CacheSchema,proto3" json:"L3CacheSchema,omitempty"`
}

func (m *LinuxIntelRdt) Reset()                    { *m = LinuxIntelRdt{} }
func (m *LinuxIntelRdt) String() string            { return proto.CompactTextString(m) }
func (*LinuxIntelRdt) ProtoMessage()               {}
func (*LinuxIntelRdt) Descriptor() ([]byte, []int) { return fileDescriptorOci, []int{30} }

func (m *LinuxIntelRdt) GetL3CacheSchema() string {
	if m != nil {
		return m.L3CacheSchema
	}
	return ""
}

func init() {
	proto.RegisterType((*Spec)(nil), "grpc.Spec")
	proto.RegisterType((*Process)(nil), "grpc.Process")
	proto.RegisterType((*Box)(nil), "grpc.Box")
	proto.RegisterType((*User)(nil), "grpc.User")
	proto.RegisterType((*LinuxCapabilities)(nil), "grpc.LinuxCapabilities")
	proto.RegisterType((*POSIXRlimit)(nil), "grpc.POSIXRlimit")
	proto.RegisterType((*Mount)(nil), "grpc.Mount")
	proto.RegisterType((*Root)(nil), "grpc.Root")
	proto.RegisterType((*Hooks)(nil), "grpc.Hooks")
	proto.RegisterType((*Hook)(nil), "grpc.Hook")
	proto.RegisterType((*Linux)(nil), "grpc.Linux")
	proto.RegisterType((*Windows)(nil), "grpc.Windows")
	proto.RegisterType((*Solaris)(nil), "grpc.Solaris")
	proto.RegisterType((*LinuxIDMapping)(nil), "grpc.LinuxIDMapping")
	proto.RegisterType((*LinuxNamespace)(nil), "grpc.LinuxNamespace")
	proto.RegisterType((*LinuxDevice)(nil), "grpc.LinuxDevice")
	proto.RegisterType((*LinuxResources)(nil), "grpc.LinuxResources")
	proto.RegisterType((*LinuxMemory)(nil), "grpc.LinuxMemory")
	proto.RegisterType((*LinuxCPU)(nil), "grpc.LinuxCPU")
	proto.RegisterType((*LinuxWeightDevice)(nil), "grpc.LinuxWeightDevice")
	proto.RegisterType((*LinuxThrottleDevice)(nil), "grpc.LinuxThrottleDevice")
	proto.RegisterType((*LinuxBlockIO)(nil), "grpc.LinuxBlockIO")
	proto.RegisterType((*LinuxPids)(nil), "grpc.LinuxPids")
	proto.RegisterType((*LinuxDeviceCgroup)(nil), "grpc.LinuxDeviceCgroup")
	proto.RegisterType((*LinuxNetwork)(nil), "grpc.LinuxNetwork")
	proto.RegisterType((*LinuxHugepageLimit)(nil), "grpc.LinuxHugepageLimit")
	proto.RegisterType((*LinuxInterfacePriority)(nil), "grpc.LinuxInterfacePriority")
	proto.RegisterType((*LinuxSeccomp)(nil), "grpc.LinuxSeccomp")
	proto.RegisterType((*LinuxSeccompArg)(nil), "grpc.LinuxSeccompArg")
	proto.RegisterType((*LinuxSyscall)(nil), "grpc.LinuxSyscall")
	proto.RegisterType((*LinuxIntelRdt)(nil), "grpc.LinuxIntelRdt")
}
func (this *Spec) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Spec)
	if !ok {
		that2, ok := that.(Spec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Process.Equal(that1.Process) {
		return false
	}
	if !this.Root.Equal(that1.Root) {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if len(this.Mounts) != len(that1.Mounts) {
		return false
	}
	for i := range this.Mounts {
		if !this.Mounts[i].Equal(&that1.Mounts[i]) {
			return false
		}
	}
	if !this.Hooks.Equal(that1.Hooks) {
		return false
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if !this.Linux.Equal(that1.Linux) {
		return false
	}
	if !this.Solaris.Equal(that1.Solaris) {
		return false
	}
	if !this.Windows.Equal(that1.Windows) {
		return false
	}
	return true
}
func (this *Process) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Process)
	if !ok {
		that2, ok := that.(Process)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Terminal != that1.Terminal {
		return false
	}
	if !this.ConsoleSize.Equal(that1.ConsoleSize) {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if this.Cwd != that1.Cwd {
		return false
	}
	if !this.Capabilities.Equal(that1.Capabilities) {
		return false
	}
	if len(this.Rlimits) != len(that1.Rlimits) {
		return false
	}
	for i := range this.Rlimits {
		if !this.Rlimits[i].Equal(&that1.Rlimits[i]) {
			return false
		}
	}
	if this.NoNewPrivileges != that1.NoNewPrivileges {
		return false
	}
	if this.ApparmorProfile != that1.ApparmorProfile {
		return false
	}
	if this.OOMScoreAdj != that1.OOMScoreAdj {
		return false
	}
	if this.SelinuxLabel != that1.SelinuxLabel {
		return false
	}
	return true
}
func (this *Box) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Box)
	if !ok {
		that2, ok := that.(Box)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UID != that1.UID {
		return false
	}
	if this.GID != that1.GID {
		return false
	}
	if len(this.AdditionalGids) != len(that1.AdditionalGids) {
		return false
	}
	for i := range this.AdditionalGids {
		if this.AdditionalGids[i] != that1.AdditionalGids[i] {
			return false
		}
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *LinuxCapabilities) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxCapabilities)
	if !ok {
		that2, ok := that.(LinuxCapabilities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Bounding) != len(that1.Bounding) {
		return false
	}
	for i := range this.Bounding {
		if this.Bounding[i] != that1.Bounding[i] {
			return false
		}
	}
	if len(this.Effective) != len(that1.Effective) {
		return false
	}
	for i := range this.Effective {
		if this.Effective[i] != that1.Effective[i] {
			return false
		}
	}
	if len(this.Inheritable) != len(that1.Inheritable) {
		return false
	}
	for i := range this.Inheritable {
		if this.Inheritable[i] != that1.Inheritable[i] {
			return false
		}
	}
	if len(this.Permitted) != len(that1.Permitted) {
		return false
	}
	for i := range this.Permitted {
		if this.Permitted[i] != that1.Permitted[i] {
			return false
		}
	}
	if len(this.Ambient) != len(that1.Ambient) {
		return false
	}
	for i := range this.Ambient {
		if this.Ambient[i] != that1.Ambient[i] {
			return false
		}
	}
	return true
}
func (this *POSIXRlimit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*POSIXRlimit)
	if !ok {
		that2, ok := that.(POSIXRlimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Hard != that1.Hard {
		return false
	}
	if this.Soft != that1.Soft {
		return false
	}
	return true
}
func (this *Mount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Mount)
	if !ok {
		that2, ok := that.(Mount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if this.Options[i] != that1.Options[i] {
			return false
		}
	}
	return true
}
func (this *Root) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Root)
	if !ok {
		that2, ok := that.(Root)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Readonly != that1.Readonly {
		return false
	}
	return true
}
func (this *Hooks) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Hooks)
	if !ok {
		that2, ok := that.(Hooks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Prestart) != len(that1.Prestart) {
		return false
	}
	for i := range this.Prestart {
		if !this.Prestart[i].Equal(&that1.Prestart[i]) {
			return false
		}
	}
	if len(this.Poststart) != len(that1.Poststart) {
		return false
	}
	for i := range this.Poststart {
		if !this.Poststart[i].Equal(&that1.Poststart[i]) {
			return false
		}
	}
	if len(this.Poststop) != len(that1.Poststop) {
		return false
	}
	for i := range this.Poststop {
		if !this.Poststop[i].Equal(&that1.Poststop[i]) {
			return false
		}
	}
	return true
}
func (this *Hook) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Hook)
	if !ok {
		that2, ok := that.(Hook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *Linux) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Linux)
	if !ok {
		that2, ok := that.(Linux)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UIDMappings) != len(that1.UIDMappings) {
		return false
	}
	for i := range this.UIDMappings {
		if !this.UIDMappings[i].Equal(&that1.UIDMappings[i]) {
			return false
		}
	}
	if len(this.GIDMappings) != len(that1.GIDMappings) {
		return false
	}
	for i := range this.GIDMappings {
		if !this.GIDMappings[i].Equal(&that1.GIDMappings[i]) {
			return false
		}
	}
	if len(this.Sysctl) != len(that1.Sysctl) {
		return false
	}
	for i := range this.Sysctl {
		if this.Sysctl[i] != that1.Sysctl[i] {
			return false
		}
	}
	if !this.Resources.Equal(that1.Resources) {
		return false
	}
	if this.CgroupsPath != that1.CgroupsPath {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if !this.Namespaces[i].Equal(&that1.Namespaces[i]) {
			return false
		}
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(&that1.Devices[i]) {
			return false
		}
	}
	if !this.Seccomp.Equal(that1.Seccomp) {
		return false
	}
	if this.RootfsPropagation != that1.RootfsPropagation {
		return false
	}
	if len(this.MaskedPaths) != len(that1.MaskedPaths) {
		return false
	}
	for i := range this.MaskedPaths {
		if this.MaskedPaths[i] != that1.MaskedPaths[i] {
			return false
		}
	}
	if len(this.ReadonlyPaths) != len(that1.ReadonlyPaths) {
		return false
	}
	for i := range this.ReadonlyPaths {
		if this.ReadonlyPaths[i] != that1.ReadonlyPaths[i] {
			return false
		}
	}
	if this.MountLabel != that1.MountLabel {
		return false
	}
	if !this.IntelRdt.Equal(that1.IntelRdt) {
		return false
	}
	return true
}
func (this *Windows) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Windows)
	if !ok {
		that2, ok := that.(Windows)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Dummy != that1.Dummy {
		return false
	}
	return true
}
func (this *Solaris) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Solaris)
	if !ok {
		that2, ok := that.(Solaris)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Dummy != that1.Dummy {
		return false
	}
	return true
}
func (this *LinuxIDMapping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxIDMapping)
	if !ok {
		that2, ok := that.(LinuxIDMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.HostID != that1.HostID {
		return false
	}
	if this.ContainerID != that1.ContainerID {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	return true
}
func (this *LinuxNamespace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxNamespace)
	if !ok {
		that2, ok := that.(LinuxNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *LinuxDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxDevice)
	if !ok {
		that2, ok := that.(LinuxDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.FileMode != that1.FileMode {
		return false
	}
	if this.UID != that1.UID {
		return false
	}
	if this.GID != that1.GID {
		return false
	}
	return true
}
func (this *LinuxResources) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxResources)
	if !ok {
		that2, ok := that.(LinuxResources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(&that1.Devices[i]) {
			return false
		}
	}
	if !this.Memory.Equal(that1.Memory) {
		return false
	}
	if !this.CPU.Equal(that1.CPU) {
		return false
	}
	if !this.Pids.Equal(that1.Pids) {
		return false
	}
	if !this.BlockIO.Equal(that1.BlockIO) {
		return false
	}
	if len(this.HugepageLimits) != len(that1.HugepageLimits) {
		return false
	}
	for i := range this.HugepageLimits {
		if !this.HugepageLimits[i].Equal(&that1.HugepageLimits[i]) {
			return false
		}
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	return true
}
func (this *LinuxMemory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxMemory)
	if !ok {
		that2, ok := that.(LinuxMemory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Reservation != that1.Reservation {
		return false
	}
	if this.Swap != that1.Swap {
		return false
	}
	if this.Kernel != that1.Kernel {
		return false
	}
	if this.KernelTCP != that1.KernelTCP {
		return false
	}
	if this.Swappiness != that1.Swappiness {
		return false
	}
	if this.DisableOOMKiller != that1.DisableOOMKiller {
		return false
	}
	return true
}
func (this *LinuxCPU) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxCPU)
	if !ok {
		that2, ok := that.(LinuxCPU)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Shares != that1.Shares {
		return false
	}
	if this.Quota != that1.Quota {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	if this.RealtimeRuntime != that1.RealtimeRuntime {
		return false
	}
	if this.RealtimePeriod != that1.RealtimePeriod {
		return false
	}
	if this.Cpus != that1.Cpus {
		return false
	}
	if this.Mems != that1.Mems {
		return false
	}
	return true
}
func (this *LinuxWeightDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxWeightDevice)
	if !ok {
		that2, ok := that.(LinuxWeightDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.LeafWeight != that1.LeafWeight {
		return false
	}
	return true
}
func (this *LinuxThrottleDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxThrottleDevice)
	if !ok {
		that2, ok := that.(LinuxThrottleDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	return true
}
func (this *LinuxBlockIO) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxBlockIO)
	if !ok {
		that2, ok := that.(LinuxBlockIO)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.LeafWeight != that1.LeafWeight {
		return false
	}
	if len(this.WeightDevice) != len(that1.WeightDevice) {
		return false
	}
	for i := range this.WeightDevice {
		if !this.WeightDevice[i].Equal(&that1.WeightDevice[i]) {
			return false
		}
	}
	if len(this.ThrottleReadBpsDevice) != len(that1.ThrottleReadBpsDevice) {
		return false
	}
	for i := range this.ThrottleReadBpsDevice {
		if !this.ThrottleReadBpsDevice[i].Equal(&that1.ThrottleReadBpsDevice[i]) {
			return false
		}
	}
	if len(this.ThrottleWriteBpsDevice) != len(that1.ThrottleWriteBpsDevice) {
		return false
	}
	for i := range this.ThrottleWriteBpsDevice {
		if !this.ThrottleWriteBpsDevice[i].Equal(&that1.ThrottleWriteBpsDevice[i]) {
			return false
		}
	}
	if len(this.ThrottleReadIOPSDevice) != len(that1.ThrottleReadIOPSDevice) {
		return false
	}
	for i := range this.ThrottleReadIOPSDevice {
		if !this.ThrottleReadIOPSDevice[i].Equal(&that1.ThrottleReadIOPSDevice[i]) {
			return false
		}
	}
	if len(this.ThrottleWriteIOPSDevice) != len(that1.ThrottleWriteIOPSDevice) {
		return false
	}
	for i := range this.ThrottleWriteIOPSDevice {
		if !this.ThrottleWriteIOPSDevice[i].Equal(&that1.ThrottleWriteIOPSDevice[i]) {
			return false
		}
	}
	return true
}
func (this *LinuxPids) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxPids)
	if !ok {
		that2, ok := that.(LinuxPids)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *LinuxDeviceCgroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxDeviceCgroup)
	if !ok {
		that2, ok := that.(LinuxDeviceCgroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Allow != that1.Allow {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Access != that1.Access {
		return false
	}
	return true
}
func (this *LinuxNetwork) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxNetwork)
	if !ok {
		that2, ok := that.(LinuxNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClassID != that1.ClassID {
		return false
	}
	if len(this.Priorities) != len(that1.Priorities) {
		return false
	}
	for i := range this.Priorities {
		if !this.Priorities[i].Equal(&that1.Priorities[i]) {
			return false
		}
	}
	return true
}
func (this *LinuxHugepageLimit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxHugepageLimit)
	if !ok {
		that2, ok := that.(LinuxHugepageLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pagesize != that1.Pagesize {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *LinuxInterfacePriority) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxInterfacePriority)
	if !ok {
		that2, ok := that.(LinuxInterfacePriority)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	return true
}
func (this *LinuxSeccomp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxSeccomp)
	if !ok {
		that2, ok := that.(LinuxSeccomp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DefaultAction != that1.DefaultAction {
		return false
	}
	if len(this.Architectures) != len(that1.Architectures) {
		return false
	}
	for i := range this.Architectures {
		if this.Architectures[i] != that1.Architectures[i] {
			return false
		}
	}
	if len(this.Syscalls) != len(that1.Syscalls) {
		return false
	}
	for i := range this.Syscalls {
		if !this.Syscalls[i].Equal(&that1.Syscalls[i]) {
			return false
		}
	}
	return true
}
func (this *LinuxSeccompArg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxSeccompArg)
	if !ok {
		that2, ok := that.(LinuxSeccompArg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ValueTwo != that1.ValueTwo {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	return true
}
func (this *LinuxSyscall) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxSyscall)
	if !ok {
		that2, ok := that.(LinuxSyscall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Names) != len(that1.Names) {
		return false
	}
	for i := range this.Names {
		if this.Names[i] != that1.Names[i] {
			return false
		}
	}
	if this.Action != that1.Action {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(&that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *LinuxIntelRdt) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinuxIntelRdt)
	if !ok {
		that2, ok := that.(LinuxIntelRdt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.L3CacheSchema != that1.L3CacheSchema {
		return false
	}
	return true
}
func NewPopulatedSpec(r randyOci, easy bool) *Spec {
	this := &Spec{}
	this.Version = string(randStringOci(r))
	if r.Intn(10) != 0 {
		this.Process = NewPopulatedProcess(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Root = NewPopulatedRoot(r, easy)
	}
	this.Hostname = string(randStringOci(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Mounts = make([]Mount, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedMount(r, easy)
			this.Mounts[i] = *v2
		}
	}
	if r.Intn(10) != 0 {
		this.Hooks = NewPopulatedHooks(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.Annotations = make(map[string]string)
		for i := 0; i < v3; i++ {
			this.Annotations[randStringOci(r)] = randStringOci(r)
		}
	}
	if r.Intn(10) != 0 {
		this.Linux = NewPopulatedLinux(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Solaris = NewPopulatedSolaris(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Windows = NewPopulatedWindows(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProcess(r randyOci, easy bool) *Process {
	this := &Process{}
	this.Terminal = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.ConsoleSize = NewPopulatedBox(r, easy)
	}
	v4 := NewPopulatedUser(r, easy)
	this.User = *v4
	v5 := r.Intn(10)
	this.Args = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Args[i] = string(randStringOci(r))
	}
	v6 := r.Intn(10)
	this.Env = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.Env[i] = string(randStringOci(r))
	}
	this.Cwd = string(randStringOci(r))
	if r.Intn(10) != 0 {
		this.Capabilities = NewPopulatedLinuxCapabilities(r, easy)
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Rlimits = make([]POSIXRlimit, v7)
		for i := 0; i < v7; i++ {
			v8 := NewPopulatedPOSIXRlimit(r, easy)
			this.Rlimits[i] = *v8
		}
	}
	this.NoNewPrivileges = bool(bool(r.Intn(2) == 0))
	this.ApparmorProfile = string(randStringOci(r))
	this.OOMScoreAdj = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.OOMScoreAdj *= -1
	}
	this.SelinuxLabel = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBox(r randyOci, easy bool) *Box {
	this := &Box{}
	this.Height = uint32(r.Uint32())
	this.Width = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUser(r randyOci, easy bool) *User {
	this := &User{}
	this.UID = uint32(r.Uint32())
	this.GID = uint32(r.Uint32())
	v9 := r.Intn(10)
	this.AdditionalGids = make([]uint32, v9)
	for i := 0; i < v9; i++ {
		this.AdditionalGids[i] = uint32(r.Uint32())
	}
	this.Username = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxCapabilities(r randyOci, easy bool) *LinuxCapabilities {
	this := &LinuxCapabilities{}
	v10 := r.Intn(10)
	this.Bounding = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.Bounding[i] = string(randStringOci(r))
	}
	v11 := r.Intn(10)
	this.Effective = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.Effective[i] = string(randStringOci(r))
	}
	v12 := r.Intn(10)
	this.Inheritable = make([]string, v12)
	for i := 0; i < v12; i++ {
		this.Inheritable[i] = string(randStringOci(r))
	}
	v13 := r.Intn(10)
	this.Permitted = make([]string, v13)
	for i := 0; i < v13; i++ {
		this.Permitted[i] = string(randStringOci(r))
	}
	v14 := r.Intn(10)
	this.Ambient = make([]string, v14)
	for i := 0; i < v14; i++ {
		this.Ambient[i] = string(randStringOci(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPOSIXRlimit(r randyOci, easy bool) *POSIXRlimit {
	this := &POSIXRlimit{}
	this.Type = string(randStringOci(r))
	this.Hard = uint64(uint64(r.Uint32()))
	this.Soft = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMount(r randyOci, easy bool) *Mount {
	this := &Mount{}
	this.Destination = string(randStringOci(r))
	this.Source = string(randStringOci(r))
	this.Type = string(randStringOci(r))
	v15 := r.Intn(10)
	this.Options = make([]string, v15)
	for i := 0; i < v15; i++ {
		this.Options[i] = string(randStringOci(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRoot(r randyOci, easy bool) *Root {
	this := &Root{}
	this.Path = string(randStringOci(r))
	this.Readonly = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHooks(r randyOci, easy bool) *Hooks {
	this := &Hooks{}
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.Prestart = make([]Hook, v16)
		for i := 0; i < v16; i++ {
			v17 := NewPopulatedHook(r, easy)
			this.Prestart[i] = *v17
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(5)
		this.Poststart = make([]Hook, v18)
		for i := 0; i < v18; i++ {
			v19 := NewPopulatedHook(r, easy)
			this.Poststart[i] = *v19
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.Poststop = make([]Hook, v20)
		for i := 0; i < v20; i++ {
			v21 := NewPopulatedHook(r, easy)
			this.Poststop[i] = *v21
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHook(r randyOci, easy bool) *Hook {
	this := &Hook{}
	this.Path = string(randStringOci(r))
	v22 := r.Intn(10)
	this.Args = make([]string, v22)
	for i := 0; i < v22; i++ {
		this.Args[i] = string(randStringOci(r))
	}
	v23 := r.Intn(10)
	this.Env = make([]string, v23)
	for i := 0; i < v23; i++ {
		this.Env[i] = string(randStringOci(r))
	}
	this.Timeout = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timeout *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinux(r randyOci, easy bool) *Linux {
	this := &Linux{}
	if r.Intn(10) != 0 {
		v24 := r.Intn(5)
		this.UIDMappings = make([]LinuxIDMapping, v24)
		for i := 0; i < v24; i++ {
			v25 := NewPopulatedLinuxIDMapping(r, easy)
			this.UIDMappings[i] = *v25
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.GIDMappings = make([]LinuxIDMapping, v26)
		for i := 0; i < v26; i++ {
			v27 := NewPopulatedLinuxIDMapping(r, easy)
			this.GIDMappings[i] = *v27
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.Sysctl = make(map[string]string)
		for i := 0; i < v28; i++ {
			this.Sysctl[randStringOci(r)] = randStringOci(r)
		}
	}
	if r.Intn(10) != 0 {
		this.Resources = NewPopulatedLinuxResources(r, easy)
	}
	this.CgroupsPath = string(randStringOci(r))
	if r.Intn(10) != 0 {
		v29 := r.Intn(5)
		this.Namespaces = make([]LinuxNamespace, v29)
		for i := 0; i < v29; i++ {
			v30 := NewPopulatedLinuxNamespace(r, easy)
			this.Namespaces[i] = *v30
		}
	}
	if r.Intn(10) != 0 {
		v31 := r.Intn(5)
		this.Devices = make([]LinuxDevice, v31)
		for i := 0; i < v31; i++ {
			v32 := NewPopulatedLinuxDevice(r, easy)
			this.Devices[i] = *v32
		}
	}
	if r.Intn(10) != 0 {
		this.Seccomp = NewPopulatedLinuxSeccomp(r, easy)
	}
	this.RootfsPropagation = string(randStringOci(r))
	v33 := r.Intn(10)
	this.MaskedPaths = make([]string, v33)
	for i := 0; i < v33; i++ {
		this.MaskedPaths[i] = string(randStringOci(r))
	}
	v34 := r.Intn(10)
	this.ReadonlyPaths = make([]string, v34)
	for i := 0; i < v34; i++ {
		this.ReadonlyPaths[i] = string(randStringOci(r))
	}
	this.MountLabel = string(randStringOci(r))
	if r.Intn(10) != 0 {
		this.IntelRdt = NewPopulatedLinuxIntelRdt(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedWindows(r randyOci, easy bool) *Windows {
	this := &Windows{}
	this.Dummy = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSolaris(r randyOci, easy bool) *Solaris {
	this := &Solaris{}
	this.Dummy = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxIDMapping(r randyOci, easy bool) *LinuxIDMapping {
	this := &LinuxIDMapping{}
	this.HostID = uint32(r.Uint32())
	this.ContainerID = uint32(r.Uint32())
	this.Size_ = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxNamespace(r randyOci, easy bool) *LinuxNamespace {
	this := &LinuxNamespace{}
	this.Type = string(randStringOci(r))
	this.Path = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxDevice(r randyOci, easy bool) *LinuxDevice {
	this := &LinuxDevice{}
	this.Path = string(randStringOci(r))
	this.Type = string(randStringOci(r))
	this.Major = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Major *= -1
	}
	this.Minor = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Minor *= -1
	}
	this.FileMode = uint32(r.Uint32())
	this.UID = uint32(r.Uint32())
	this.GID = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxResources(r randyOci, easy bool) *LinuxResources {
	this := &LinuxResources{}
	if r.Intn(10) != 0 {
		v35 := r.Intn(5)
		this.Devices = make([]LinuxDeviceCgroup, v35)
		for i := 0; i < v35; i++ {
			v36 := NewPopulatedLinuxDeviceCgroup(r, easy)
			this.Devices[i] = *v36
		}
	}
	if r.Intn(10) != 0 {
		this.Memory = NewPopulatedLinuxMemory(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CPU = NewPopulatedLinuxCPU(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Pids = NewPopulatedLinuxPids(r, easy)
	}
	if r.Intn(10) != 0 {
		this.BlockIO = NewPopulatedLinuxBlockIO(r, easy)
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(5)
		this.HugepageLimits = make([]LinuxHugepageLimit, v37)
		for i := 0; i < v37; i++ {
			v38 := NewPopulatedLinuxHugepageLimit(r, easy)
			this.HugepageLimits[i] = *v38
		}
	}
	if r.Intn(10) != 0 {
		this.Network = NewPopulatedLinuxNetwork(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxMemory(r randyOci, easy bool) *LinuxMemory {
	this := &LinuxMemory{}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Reservation = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Reservation *= -1
	}
	this.Swap = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Swap *= -1
	}
	this.Kernel = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Kernel *= -1
	}
	this.KernelTCP = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.KernelTCP *= -1
	}
	this.Swappiness = uint64(uint64(r.Uint32()))
	this.DisableOOMKiller = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxCPU(r randyOci, easy bool) *LinuxCPU {
	this := &LinuxCPU{}
	this.Shares = uint64(uint64(r.Uint32()))
	this.Quota = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Quota *= -1
	}
	this.Period = uint64(uint64(r.Uint32()))
	this.RealtimeRuntime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RealtimeRuntime *= -1
	}
	this.RealtimePeriod = uint64(uint64(r.Uint32()))
	this.Cpus = string(randStringOci(r))
	this.Mems = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxWeightDevice(r randyOci, easy bool) *LinuxWeightDevice {
	this := &LinuxWeightDevice{}
	this.Major = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Major *= -1
	}
	this.Minor = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Minor *= -1
	}
	this.Weight = uint32(r.Uint32())
	this.LeafWeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxThrottleDevice(r randyOci, easy bool) *LinuxThrottleDevice {
	this := &LinuxThrottleDevice{}
	this.Major = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Major *= -1
	}
	this.Minor = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Minor *= -1
	}
	this.Rate = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxBlockIO(r randyOci, easy bool) *LinuxBlockIO {
	this := &LinuxBlockIO{}
	this.Weight = uint32(r.Uint32())
	this.LeafWeight = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v39 := r.Intn(5)
		this.WeightDevice = make([]LinuxWeightDevice, v39)
		for i := 0; i < v39; i++ {
			v40 := NewPopulatedLinuxWeightDevice(r, easy)
			this.WeightDevice[i] = *v40
		}
	}
	if r.Intn(10) != 0 {
		v41 := r.Intn(5)
		this.ThrottleReadBpsDevice = make([]LinuxThrottleDevice, v41)
		for i := 0; i < v41; i++ {
			v42 := NewPopulatedLinuxThrottleDevice(r, easy)
			this.ThrottleReadBpsDevice[i] = *v42
		}
	}
	if r.Intn(10) != 0 {
		v43 := r.Intn(5)
		this.ThrottleWriteBpsDevice = make([]LinuxThrottleDevice, v43)
		for i := 0; i < v43; i++ {
			v44 := NewPopulatedLinuxThrottleDevice(r, easy)
			this.ThrottleWriteBpsDevice[i] = *v44
		}
	}
	if r.Intn(10) != 0 {
		v45 := r.Intn(5)
		this.ThrottleReadIOPSDevice = make([]LinuxThrottleDevice, v45)
		for i := 0; i < v45; i++ {
			v46 := NewPopulatedLinuxThrottleDevice(r, easy)
			this.ThrottleReadIOPSDevice[i] = *v46
		}
	}
	if r.Intn(10) != 0 {
		v47 := r.Intn(5)
		this.ThrottleWriteIOPSDevice = make([]LinuxThrottleDevice, v47)
		for i := 0; i < v47; i++ {
			v48 := NewPopulatedLinuxThrottleDevice(r, easy)
			this.ThrottleWriteIOPSDevice[i] = *v48
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxPids(r randyOci, easy bool) *LinuxPids {
	this := &LinuxPids{}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxDeviceCgroup(r randyOci, easy bool) *LinuxDeviceCgroup {
	this := &LinuxDeviceCgroup{}
	this.Allow = bool(bool(r.Intn(2) == 0))
	this.Type = string(randStringOci(r))
	this.Major = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Major *= -1
	}
	this.Minor = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Minor *= -1
	}
	this.Access = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxNetwork(r randyOci, easy bool) *LinuxNetwork {
	this := &LinuxNetwork{}
	this.ClassID = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v49 := r.Intn(5)
		this.Priorities = make([]LinuxInterfacePriority, v49)
		for i := 0; i < v49; i++ {
			v50 := NewPopulatedLinuxInterfacePriority(r, easy)
			this.Priorities[i] = *v50
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxHugepageLimit(r randyOci, easy bool) *LinuxHugepageLimit {
	this := &LinuxHugepageLimit{}
	this.Pagesize = string(randStringOci(r))
	this.Limit = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxInterfacePriority(r randyOci, easy bool) *LinuxInterfacePriority {
	this := &LinuxInterfacePriority{}
	this.Name = string(randStringOci(r))
	this.Priority = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxSeccomp(r randyOci, easy bool) *LinuxSeccomp {
	this := &LinuxSeccomp{}
	this.DefaultAction = string(randStringOci(r))
	v51 := r.Intn(10)
	this.Architectures = make([]string, v51)
	for i := 0; i < v51; i++ {
		this.Architectures[i] = string(randStringOci(r))
	}
	if r.Intn(10) != 0 {
		v52 := r.Intn(5)
		this.Syscalls = make([]LinuxSyscall, v52)
		for i := 0; i < v52; i++ {
			v53 := NewPopulatedLinuxSyscall(r, easy)
			this.Syscalls[i] = *v53
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxSeccompArg(r randyOci, easy bool) *LinuxSeccompArg {
	this := &LinuxSeccompArg{}
	this.Index = uint64(uint64(r.Uint32()))
	this.Value = uint64(uint64(r.Uint32()))
	this.ValueTwo = uint64(uint64(r.Uint32()))
	this.Op = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxSyscall(r randyOci, easy bool) *LinuxSyscall {
	this := &LinuxSyscall{}
	v54 := r.Intn(10)
	this.Names = make([]string, v54)
	for i := 0; i < v54; i++ {
		this.Names[i] = string(randStringOci(r))
	}
	this.Action = string(randStringOci(r))
	if r.Intn(10) != 0 {
		v55 := r.Intn(5)
		this.Args = make([]LinuxSeccompArg, v55)
		for i := 0; i < v55; i++ {
			v56 := NewPopulatedLinuxSeccompArg(r, easy)
			this.Args[i] = *v56
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLinuxIntelRdt(r randyOci, easy bool) *LinuxIntelRdt {
	this := &LinuxIntelRdt{}
	this.L3CacheSchema = string(randStringOci(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyOci interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOci(r randyOci) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOci(r randyOci) string {
	v57 := r.Intn(100)
	tmps := make([]rune, v57)
	for i := 0; i < v57; i++ {
		tmps[i] = randUTF8RuneOci(r)
	}
	return string(tmps)
}
func randUnrecognizedOci(r randyOci, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOci(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOci(dAtA []byte, r randyOci, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOci(dAtA, uint64(key))
		v58 := r.Int63()
		if r.Intn(2) == 0 {
			v58 *= -1
		}
		dAtA = encodeVarintPopulateOci(dAtA, uint64(v58))
	case 1:
		dAtA = encodeVarintPopulateOci(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOci(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOci(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOci(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOci(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("oci.proto", fileDescriptorOci) }

var fileDescriptorOci = []byte{
	// 2185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0x47, 0x9a, 0xd1, 0xbf, 0x96, 0x65, 0x27, 0xbd, 0x89, 0x23, 0xc2, 0x96, 0xd7, 0x3b, 0x6c,
	0x81, 0x81, 0xe0, 0x14, 0x09, 0x7f, 0x96, 0xe5, 0x4f, 0x95, 0x6c, 0x27, 0xb1, 0x6a, 0xe3, 0x58,
	0xb4, 0xec, 0x0d, 0x70, 0xa0, 0xaa, 0x3d, 0xd3, 0x92, 0x7a, 0x3d, 0x33, 0x3d, 0x74, 0xb7, 0xac,
	0x78, 0x6f, 0x7c, 0x03, 0xaa, 0xf8, 0x04, 0x9c, 0x80, 0x6f, 0x40, 0x71, 0xe2, 0x06, 0xc5, 0x57,
	0xa0, 0x0a, 0x8a, 0xdc, 0xb9, 0x73, 0xa4, 0x5e, 0x77, 0xcf, 0xa8, 0x65, 0x3b, 0xb0, 0x0b, 0x27,
	0xcd, 0xfb, 0xbd, 0xd7, 0xaf, 0xbb, 0xdf, 0xff, 0x16, 0xea, 0x88, 0x98, 0xef, 0x16, 0x52, 0x68,
	0x81, 0xc3, 0xa9, 0x2c, 0xe2, 0xfb, 0x5f, 0x9f, 0x72, 0x3d, 0x9b, 0x9f, 0xed, 0xc6, 0x22, 0x7b,
	0x38, 0x15, 0x53, 0xf1, 0xd0, 0x30, 0xcf, 0xe6, 0x13, 0x43, 0x19, 0xc2, 0x7c, 0xd9, 0x45, 0xf7,
	0xb7, 0xa6, 0x42, 0x4c, 0x53, 0xb6, 0x94, 0x5a, 0x48, 0x5a, 0x14, 0x4c, 0x2a, 0xcb, 0x8f, 0xfe,
	0x14, 0xa0, 0x70, 0x5c, 0xb0, 0x18, 0xf7, 0x51, 0xeb, 0x23, 0x26, 0x15, 0x17, 0x79, 0xbf, 0xb6,
	0x5d, 0xdb, 0xe9, 0x90, 0xd6, 0x85, 0x25, 0xf1, 0x97, 0x51, 0x6b, 0x24, 0x45, 0xcc, 0x94, 0xea,
	0xd7, 0xb7, 0x6b, 0x3b, 0xdd, 0x47, 0xbd, 0x5d, 0x38, 0xc9, 0xae, 0x03, 0x49, 0xab, 0xb0, 0x1f,
	0x78, 0x0b, 0x85, 0x44, 0x08, 0xdd, 0x0f, 0x8c, 0x14, 0xb2, 0x52, 0x80, 0x90, 0x50, 0x0a, 0xa1,
	0xf1, 0x7d, 0xd4, 0x3e, 0x14, 0x4a, 0xe7, 0x34, 0x63, 0xfd, 0xd0, 0xec, 0xd1, 0x9e, 0x39, 0x1a,
	0x7f, 0x05, 0x35, 0x8f, 0xc4, 0x3c, 0xd7, 0xaa, 0xdf, 0xd8, 0x0e, 0x76, 0xba, 0x8f, 0xba, 0x76,
	0xb5, 0xc1, 0xf6, 0xc2, 0x3f, 0xff, 0xed, 0x9d, 0xcf, 0x91, 0x66, 0x66, 0x04, 0xf0, 0xbb, 0xa8,
	0x71, 0x28, 0xc4, 0xb9, 0xea, 0x37, 0xcd, 0x3e, 0x4e, 0xd2, 0x40, 0xa4, 0x31, 0x83, 0x1f, 0xfc,
	0x03, 0xd4, 0x1d, 0xe4, 0xb9, 0xd0, 0x54, 0x73, 0x91, 0xab, 0x7e, 0xcb, 0xa8, 0xfc, 0x82, 0x15,
	0x84, 0xdb, 0xee, 0x7a, 0xdc, 0x27, 0xb9, 0x96, 0x97, 0xa4, 0x4b, 0x97, 0x08, 0xec, 0xf0, 0x9c,
	0xe7, 0xf3, 0x57, 0xfd, 0xb6, 0xbf, 0x83, 0x81, 0x48, 0x23, 0x85, 0x1f, 0x30, 0xca, 0x58, 0xa4,
	0x54, 0x72, 0xd5, 0xef, 0xf8, 0x46, 0x71, 0x20, 0x69, 0x29, 0xfb, 0x01, 0x82, 0x2f, 0x79, 0x9e,
	0x88, 0x85, 0xea, 0x23, 0x5f, 0xd0, 0x81, 0xa4, 0xb5, 0xb0, 0x1f, 0xf7, 0x7f, 0x88, 0x6e, 0x5d,
	0x3d, 0x15, 0xbe, 0x85, 0x82, 0x73, 0x76, 0xe9, 0x1c, 0x02, 0x9f, 0xf8, 0x0e, 0x6a, 0x5c, 0xd0,
	0x74, 0xce, 0x8c, 0x2b, 0x3a, 0xc4, 0x12, 0x1f, 0xd4, 0xdf, 0xaf, 0x45, 0x7f, 0x08, 0x2a, 0x3f,
	0x81, 0xa5, 0x4f, 0x98, 0xcc, 0x78, 0x4e, 0x53, 0xb3, 0xb8, 0x4d, 0xda, 0xda, 0xd1, 0xf8, 0x6b,
	0xa8, 0xbb, 0x2f, 0x72, 0x25, 0x52, 0x36, 0xe6, 0x9f, 0x30, 0xe7, 0xd2, 0x8e, 0x3d, 0xd4, 0x9e,
	0x78, 0x45, 0xba, 0xf1, 0x92, 0x8b, 0xdf, 0x43, 0xe1, 0xa9, 0x62, 0x72, 0xd5, 0xa5, 0x80, 0x38,
	0x9f, 0x84, 0x73, 0xc5, 0x24, 0xc6, 0x28, 0x1c, 0xc8, 0xa9, 0xea, 0x87, 0xdb, 0xc1, 0x4e, 0x87,
	0x84, 0x54, 0x4e, 0x15, 0x1c, 0xfd, 0x49, 0x7e, 0x61, 0xbc, 0xd9, 0x21, 0x01, 0xcb, 0x2f, 0x00,
	0xd9, 0x5f, 0x24, 0xc6, 0x6b, 0x1d, 0x12, 0xc4, 0x8b, 0x04, 0x7f, 0x0f, 0xad, 0xed, 0xd3, 0x82,
	0x9e, 0xf1, 0x94, 0x6b, 0xce, 0xc0, 0x4f, 0xb0, 0xcb, 0x3d, 0xcf, 0xdc, 0x3e, 0x9b, 0xac, 0xc5,
	0x1e, 0x85, 0xbf, 0x81, 0x5a, 0x24, 0xe5, 0x19, 0xd7, 0xaa, 0xdf, 0x36, 0xfe, 0xbd, 0xed, 0xc2,
	0xf2, 0x78, 0x3c, 0xfc, 0xb1, 0xe5, 0xb8, 0x43, 0xb6, 0xa4, 0x95, 0xc3, 0x3b, 0x68, 0xe3, 0x85,
	0x78, 0xc1, 0x16, 0x23, 0xc9, 0x2f, 0x78, 0xca, 0xa6, 0xcc, 0x3a, 0xaf, 0x4d, 0x36, 0xf2, 0x55,
	0x18, 0x24, 0x07, 0x45, 0x41, 0x65, 0x26, 0xe4, 0x48, 0x8a, 0x09, 0x4f, 0x99, 0xf1, 0x5e, 0x87,
	0x6c, 0xd0, 0x55, 0x18, 0x6f, 0xa3, 0xee, 0xf1, 0xf1, 0xd1, 0x38, 0x16, 0x92, 0x0d, 0x92, 0x8f,
	0xfb, 0xdd, 0xed, 0xda, 0x4e, 0x40, 0xba, 0x62, 0x09, 0xe1, 0x08, 0xad, 0x8d, 0x99, 0x89, 0x9a,
	0xe7, 0xf4, 0x8c, 0xa5, 0xfd, 0x35, 0xa3, 0x68, 0x4d, 0x79, 0x58, 0xf4, 0x18, 0x05, 0x7b, 0xe2,
	0x15, 0xde, 0x44, 0xcd, 0x43, 0xc6, 0xa7, 0x33, 0x6d, 0xbc, 0xd6, 0x23, 0xcd, 0x99, 0xa1, 0xc0,
	0xeb, 0x2f, 0x79, 0xa2, 0x67, 0xc6, 0x5b, 0x3d, 0xd2, 0x58, 0x00, 0x11, 0xe5, 0xd6, 0x39, 0x60,
	0xd8, 0xd3, 0xe1, 0x81, 0x5b, 0x12, 0xcc, 0x87, 0x07, 0x80, 0x3c, 0x1b, 0x1e, 0x38, 0xe9, 0x60,
	0x3a, 0x3c, 0xc0, 0x5f, 0x42, 0xeb, 0x83, 0x24, 0xe1, 0x10, 0x5b, 0x34, 0x7d, 0xc6, 0x13, 0xd5,
	0x0f, 0xb6, 0x83, 0x9d, 0x1e, 0x59, 0xa7, 0x2b, 0x28, 0x44, 0x0e, 0xe8, 0xf4, 0x73, 0x74, 0xee,
	0xe8, 0xe8, 0x37, 0x35, 0x74, 0xfb, 0x9a, 0x57, 0x60, 0xc5, 0x9e, 0x98, 0xe7, 0x09, 0xcf, 0xa7,
	0xfd, 0x9a, 0xf1, 0x76, 0xfb, 0xcc, 0xd1, 0xf8, 0x6d, 0xd4, 0x79, 0x32, 0x99, 0xb0, 0x58, 0xf3,
	0x0b, 0x88, 0x34, 0x60, 0x76, 0x58, 0x09, 0x80, 0xe9, 0x86, 0xf9, 0x8c, 0x49, 0xae, 0xe9, 0x59,
	0xca, 0xcc, 0x81, 0x3a, 0xa4, 0xcb, 0x97, 0x10, 0xac, 0x1f, 0x41, 0xdc, 0x6a, 0xcd, 0x12, 0x17,
	0x5d, 0x9d, 0xa2, 0x04, 0xa0, 0x64, 0x0d, 0xb2, 0x33, 0xce, 0x72, 0xed, 0xc2, 0xac, 0x45, 0x2d,
	0x19, 0x0d, 0x51, 0xd7, 0x0b, 0x03, 0x88, 0xcf, 0x93, 0xcb, 0x82, 0xb9, 0x3c, 0x0a, 0xf5, 0x65,
	0xc1, 0x00, 0x3b, 0xa4, 0x32, 0x31, 0x36, 0x0a, 0x49, 0x38, 0xa3, 0x32, 0x01, 0x6c, 0x2c, 0x26,
	0xb6, 0x80, 0x85, 0x24, 0x54, 0x62, 0xa2, 0x23, 0x81, 0x1a, 0xa6, 0x08, 0xc1, 0x69, 0x13, 0xa6,
	0x34, 0xcf, 0x4d, 0x82, 0x3a, 0x5d, 0x3e, 0x04, 0xde, 0x53, 0x62, 0x2e, 0xe3, 0x32, 0x39, 0x1d,
	0x05, 0x6a, 0x61, 0x4b, 0xa3, 0xb6, 0xdc, 0xbe, 0x8f, 0x5a, 0xa2, 0xb0, 0xd5, 0xc9, 0xde, 0xab,
	0x24, 0xa3, 0x6f, 0xdb, 0x2a, 0x0a, 0xab, 0x46, 0x54, 0xcf, 0xca, 0x43, 0x17, 0x54, 0xcf, 0xc0,
	0xd6, 0x84, 0xd1, 0x44, 0xe4, 0xe9, 0xa5, 0xd9, 0xa3, 0x4d, 0xda, 0xd2, 0xd1, 0xd1, 0xaf, 0x6a,
	0xae, 0x2e, 0xe2, 0x07, 0xa8, 0x3d, 0x92, 0x4c, 0x69, 0x2a, 0xb5, 0xf1, 0x48, 0x95, 0xb8, 0xc0,
	0x76, 0x39, 0xd1, 0x2e, 0x9c, 0x04, 0xde, 0x45, 0x9d, 0x91, 0x50, 0xda, 0x8a, 0xd7, 0xdf, 0x20,
	0xde, 0x29, 0x4a, 0x11, 0xa3, 0xdd, 0x10, 0xa2, 0x30, 0x2e, 0xbb, 0x59, 0xbb, 0x93, 0x88, 0x7e,
	0x8a, 0x42, 0xc0, 0x6f, 0xbc, 0x4d, 0x59, 0x36, 0xea, 0xd7, 0xcb, 0x46, 0xb0, 0x2c, 0x1b, 0x7d,
	0xd4, 0x3a, 0xe1, 0x19, 0x13, 0x73, 0x6d, 0x02, 0x32, 0x20, 0x2d, 0x6d, 0xc9, 0xe8, 0x77, 0x0d,
	0x57, 0xa7, 0xf1, 0xf7, 0x51, 0xf7, 0x74, 0x78, 0x70, 0x44, 0x8b, 0x82, 0xe7, 0x53, 0xe5, 0x2e,
	0x7d, 0xc7, 0xab, 0x23, 0x15, 0xd3, 0x1d, 0xb0, 0x3b, 0x5f, 0x8a, 0xc3, 0xea, 0x67, 0xde, 0xea,
	0xfa, 0x7f, 0x5f, 0x3d, 0xf5, 0x56, 0x3f, 0x44, 0xcd, 0xf1, 0xa5, 0x8a, 0x75, 0xea, 0xac, 0xe1,
	0x97, 0xaf, 0x5d, 0xcb, 0xb1, 0x2d, 0xa6, 0xa9, 0x0c, 0x81, 0x1f, 0xa1, 0x0e, 0x61, 0x36, 0x34,
	0x94, 0xb9, 0xd2, 0xea, 0x66, 0x15, 0x8f, 0x74, 0x64, 0xf9, 0x09, 0xc1, 0xb7, 0x3f, 0x95, 0x62,
	0x5e, 0x28, 0x63, 0xc5, 0x86, 0x0d, 0xbe, 0x78, 0x09, 0xe1, 0x0f, 0x10, 0x7a, 0x41, 0x33, 0xa6,
	0x0a, 0x0a, 0x6a, 0x9b, 0xd7, 0xee, 0x50, 0x31, 0xdd, 0x1d, 0x50, 0x5e, 0x49, 0x43, 0x29, 0x3d,
	0x60, 0x17, 0x3c, 0x66, 0x65, 0xab, 0xbc, 0xed, 0x2d, 0xb4, 0x9c, 0xb2, 0x94, 0x26, 0x56, 0x0e,
	0x3f, 0x40, 0xad, 0x31, 0x8b, 0x63, 0x91, 0x15, 0xae, 0x49, 0x62, 0x6f, 0x89, 0xe3, 0x90, 0x96,
	0xb2, 0x1f, 0xf8, 0x01, 0xba, 0x0d, 0x31, 0x3d, 0x51, 0x23, 0x29, 0x0a, 0x3a, 0xb5, 0x19, 0xd4,
	0x31, 0x97, 0xb8, 0x2d, 0xaf, 0x32, 0xe0, 0xb2, 0x47, 0x54, 0x9d, 0xb3, 0x04, 0x2e, 0x06, 0x6d,
	0xd3, 0xd4, 0x85, 0x6c, 0x09, 0xe1, 0xf7, 0x50, 0xaf, 0xcc, 0x03, 0x2b, 0xd3, 0x35, 0x32, 0x3d,
	0xe9, 0x83, 0x78, 0x0b, 0x21, 0x93, 0xba, 0x7e, 0xd9, 0x45, 0x59, 0x85, 0xe0, 0x87, 0xa8, 0x3d,
	0xcc, 0x35, 0x4b, 0x49, 0xa2, 0xfb, 0x3d, 0x73, 0x89, 0xb7, 0x7c, 0xa7, 0x3b, 0x16, 0x69, 0x73,
	0xf7, 0x75, 0xff, 0xbb, 0xa8, 0xeb, 0x39, 0xf4, 0x33, 0x75, 0xe7, 0x77, 0xaa, 0x31, 0x00, 0x84,
	0x92, 0x79, 0x96, 0x95, 0x0b, 0x2d, 0x01, 0x02, 0x6e, 0x76, 0x78, 0x83, 0xc0, 0xcf, 0xd0, 0xfa,
	0x6a, 0x30, 0x9a, 0x6e, 0x21, 0x94, 0xae, 0x4a, 0x7f, 0x73, 0x66, 0x28, 0x13, 0x2c, 0x22, 0xd7,
	0x94, 0xe7, 0x4c, 0x56, 0x5d, 0x00, 0xda, 0x7a, 0x09, 0x99, 0x42, 0x07, 0xcd, 0x3f, 0x30, 0xac,
	0x50, 0xf1, 0x4f, 0x58, 0xf4, 0xbe, 0xd3, 0x5f, 0x05, 0xca, 0x9b, 0xca, 0xa6, 0x89, 0xc0, 0xfa,
	0x32, 0x8f, 0xa3, 0x5f, 0xd7, 0x50, 0xd7, 0x0b, 0x95, 0x37, 0xe5, 0xba, 0xd1, 0x55, 0xf7, 0x74,
	0xdd, 0x41, 0x8d, 0x23, 0xfa, 0xb1, 0xb0, 0xd3, 0x45, 0x40, 0x1a, 0x19, 0x10, 0x06, 0xe5, 0xb9,
	0x90, 0x2e, 0xdb, 0x1b, 0x19, 0x10, 0x50, 0xf9, 0x9e, 0xf2, 0x94, 0x1d, 0x89, 0x84, 0x99, 0xe8,
	0xef, 0x91, 0xf6, 0xc4, 0xd1, 0x65, 0xff, 0x6b, 0x5e, 0xeb, 0x7f, 0xad, 0xaa, 0xff, 0x45, 0x7f,
	0xaf, 0xbb, 0xeb, 0x55, 0xe9, 0x85, 0xbf, 0xb3, 0x8c, 0xfa, 0xda, 0xb5, 0xcc, 0xb5, 0x1c, 0x9b,
	0x73, 0x57, 0x63, 0x1f, 0x66, 0x55, 0x96, 0x09, 0x79, 0xe9, 0x86, 0x27, 0x3f, 0x5b, 0x2c, 0x83,
	0x34, 0x33, 0xf3, 0x8b, 0xb7, 0x51, 0xb0, 0x3f, 0x3a, 0x75, 0xe3, 0xd3, 0xba, 0x3f, 0xd8, 0x8c,
	0x4e, 0x49, 0x10, 0x8f, 0x4e, 0xf1, 0x17, 0x51, 0x38, 0x82, 0x76, 0x6c, 0x0b, 0xc1, 0x86, 0x27,
	0x02, 0x30, 0x09, 0x0b, 0xe8, 0xca, 0x0f, 0x50, 0x6b, 0x2f, 0x15, 0xf1, 0xf9, 0xf0, 0xd8, 0x5c,
	0x7e, 0x35, 0xdb, 0x1c, 0x87, 0xb4, 0xce, 0xec, 0x07, 0x7e, 0x8a, 0xd6, 0x0f, 0xe7, 0x53, 0x56,
	0xd0, 0x29, 0x7b, 0x6e, 0x07, 0x24, 0x5b, 0x0e, 0xfa, 0xde, 0xa2, 0x15, 0x01, 0x77, 0xc1, 0xf5,
	0xd9, 0xca, 0x2a, 0xd8, 0xf5, 0x05, 0xd3, 0x0b, 0x21, 0xcf, 0xdd, 0x64, 0xe6, 0xef, 0xea, 0x38,
	0xa4, 0x95, 0xdb, 0x8f, 0xe8, 0xaf, 0x65, 0x14, 0x58, 0x13, 0x80, 0x1f, 0x8d, 0x1e, 0x13, 0x06,
	0x01, 0xcc, 0xcd, 0xd0, 0x8a, 0xb7, 0x51, 0x97, 0x30, 0xc5, 0xe4, 0x85, 0xad, 0x01, 0x75, 0x3b,
	0x2e, 0xc9, 0x25, 0x64, 0x62, 0x73, 0x41, 0x0b, 0x17, 0x14, 0xa1, 0x5a, 0xd0, 0x02, 0x22, 0xfd,
	0x43, 0x26, 0x73, 0x96, 0xba, 0xa0, 0x68, 0x9e, 0x1b, 0x0a, 0xe6, 0x03, 0x8b, 0x9f, 0xec, 0x8f,
	0x8c, 0x65, 0x02, 0xd2, 0x39, 0x2f, 0x01, 0xc8, 0x7f, 0xd0, 0x54, 0xf0, 0x1c, 0xde, 0x2e, 0x4d,
	0xd3, 0xd4, 0x91, 0xaa, 0x10, 0xfc, 0x55, 0x74, 0xeb, 0x80, 0x2b, 0x18, 0x34, 0x8e, 0x8f, 0x8f,
	0x3e, 0xe4, 0x69, 0xca, 0xa4, 0xb9, 0x68, 0x9b, 0xdc, 0x4a, 0xae, 0xe0, 0xd1, 0x5f, 0x6a, 0xa8,
	0x5d, 0x3a, 0x0e, 0x8e, 0x33, 0x9e, 0x51, 0x69, 0x02, 0x07, 0x94, 0x36, 0x95, 0xa1, 0xe0, 0xca,
	0x3f, 0x9a, 0x0b, 0x4d, 0xdd, 0xb5, 0x1a, 0x3f, 0x07, 0x02, 0xa4, 0x47, 0x4c, 0x72, 0x91, 0xb8,
	0xb9, 0xa2, 0x59, 0x18, 0x0a, 0x66, 0x4c, 0xc2, 0x68, 0x0a, 0xdd, 0x8c, 0xcc, 0x73, 0xf8, 0x71,
	0xb7, 0xdb, 0x90, 0xab, 0x30, 0x0c, 0x6f, 0xa5, 0xa4, 0xd3, 0xd4, 0x30, 0x9a, 0xd6, 0xe5, 0x0a,
	0x0a, 0xa6, 0xdb, 0x2f, 0xe6, 0xca, 0x8d, 0xd8, 0x61, 0x5c, 0xcc, 0x15, 0x60, 0x47, 0x2c, 0xb3,
	0xb3, 0x75, 0x87, 0x84, 0x19, 0xcb, 0x54, 0xb4, 0x70, 0x73, 0xdc, 0x4b, 0x33, 0x5d, 0xba, 0xac,
	0xad, 0xb2, 0xb1, 0x76, 0x63, 0x36, 0xd6, 0xfd, 0x6c, 0xdc, 0x44, 0x4d, 0xbb, 0xd6, 0x55, 0x90,
	0xe6, 0xc2, 0xce, 0xa9, 0x5b, 0x08, 0x3d, 0x67, 0x74, 0xe2, 0x78, 0xa1, 0xe1, 0xa1, 0xb4, 0x42,
	0xa2, 0x53, 0xf4, 0x96, 0xd9, 0xf8, 0x64, 0x26, 0x85, 0xd6, 0x29, 0xfb, 0x1f, 0xb6, 0xc6, 0x28,
	0x24, 0x54, 0xb3, 0x72, 0x46, 0x93, 0x54, 0xb3, 0xe8, 0x9f, 0x01, 0x5a, 0xf3, 0x53, 0xc1, 0x3b,
	0x5f, 0xed, 0x3f, 0x9c, 0xaf, 0x7e, 0xf5, 0x7c, 0x78, 0x80, 0xd6, 0x7c, 0x9b, 0xdc, 0xd0, 0xd1,
	0x7d, 0xb6, 0x4b, 0x9b, 0xb5, 0x85, 0x6f, 0xc6, 0x53, 0x74, 0xb7, 0xbc, 0x1d, 0xb4, 0xa8, 0xbd,
	0x42, 0x39, 0x5d, 0xa1, 0xd1, 0xf5, 0x79, 0x4f, 0xd7, 0xaa, 0x15, 0x9c, 0xb6, 0xbb, 0xfa, 0xa6,
	0xd5, 0xf8, 0x25, 0xda, 0x2c, 0xc5, 0x5f, 0x4a, 0xae, 0xd9, 0x52, 0x6f, 0xe3, 0xd3, 0xe9, 0xdd,
	0xd4, 0x37, 0x2e, 0xf7, 0x15, 0xc3, 0x8e, 0xc3, 0xe3, 0xd1, 0xd8, 0x29, 0x6e, 0x7e, 0x46, 0xc5,
	0xab, 0xcb, 0xf1, 0x4f, 0xd0, 0xbd, 0x95, 0x13, 0x7b, 0x9a, 0x5b, 0x9f, 0x4e, 0xf3, 0x3d, 0x7d,
	0xf3, 0xfa, 0xe8, 0x5d, 0xd4, 0xa9, 0x2a, 0xe4, 0xcd, 0x75, 0x26, 0xfa, 0x45, 0xf9, 0x56, 0xf1,
	0x0b, 0x39, 0xc8, 0x0e, 0xd2, 0x54, 0x2c, 0xdc, 0xa3, 0xb8, 0x41, 0x81, 0xf8, 0xbf, 0x7b, 0xd3,
	0x26, 0x6a, 0x0e, 0x62, 0xf3, 0xff, 0x88, 0x9d, 0xcb, 0x9a, 0xd4, 0x50, 0x51, 0xea, 0xa2, 0xd2,
	0x95, 0x4a, 0x98, 0x64, 0xf7, 0x53, 0xaa, 0x54, 0xd5, 0xb0, 0x5b, 0xb1, 0x25, 0xf1, 0x1e, 0x42,
	0x23, 0xc9, 0x85, 0xb4, 0xcf, 0x60, 0x3b, 0x80, 0xbe, 0x7d, 0x65, 0x16, 0x91, 0x13, 0x1a, 0x33,
	0x27, 0x75, 0x59, 0x0e, 0x71, 0x45, 0xb5, 0x2a, 0x7a, 0x8a, 0xf0, 0xf5, 0xca, 0x0e, 0x7d, 0x73,
	0x44, 0xa7, 0x0c, 0x3a, 0xbc, 0xeb, 0xc7, 0xed, 0xc2, 0xd1, 0x4b, 0xcb, 0xd9, 0x37, 0x90, 0xb3,
	0xdc, 0x21, 0xda, 0xbc, 0x79, 0x4f, 0xb0, 0x13, 0x0c, 0x07, 0x65, 0x5f, 0x37, 0xff, 0xdb, 0x80,
	0x7e, 0xc7, 0x77, 0xf9, 0xd4, 0x76, 0x67, 0xba, 0x8c, 0x7e, 0x59, 0x73, 0x06, 0x70, 0xf3, 0x20,
	0x8c, 0x6d, 0x07, 0x6c, 0x42, 0xe7, 0xa9, 0x1e, 0xc4, 0xde, 0x23, 0xaa, 0x97, 0xf8, 0x20, 0x48,
	0x0d, 0x64, 0x3c, 0xe3, 0x9a, 0xc5, 0x7a, 0x2e, 0x59, 0xf9, 0x3e, 0xe8, 0x51, 0x1f, 0xc4, 0xdf,
	0x44, 0x6d, 0x98, 0xc5, 0x68, 0x9a, 0x2a, 0x97, 0xa6, 0x2b, 0x13, 0xa8, 0x65, 0x95, 0xcf, 0x11,
	0xe5, 0x24, 0x23, 0x8e, 0x36, 0xfc, 0x13, 0x0d, 0xe4, 0x14, 0xac, 0x30, 0xcc, 0x13, 0xf6, 0xca,
	0xd5, 0xf2, 0x06, 0x07, 0x02, 0xd0, 0x8f, 0xaa, 0x49, 0x2e, 0x74, 0x93, 0x1c, 0xdc, 0xd6, 0xa0,
	0x27, 0x0b, 0xe1, 0x0a, 0x50, 0xfb, 0xc2, 0xd1, 0x78, 0x1d, 0xd5, 0x8f, 0x0b, 0xf7, 0x66, 0xae,
	0x8b, 0x22, 0xca, 0xca, 0xcb, 0xdb, 0xbd, 0x41, 0xa3, 0x19, 0xad, 0xdc, 0x23, 0xb9, 0x61, 0xe6,
	0x6f, 0x1b, 0x3b, 0x55, 0x2b, 0x34, 0xb1, 0x63, 0x8c, 0xf0, 0xd0, 0xbd, 0x8d, 0xec, 0xd5, 0xee,
	0x5e, 0x1f, 0xae, 0x07, 0xb2, 0x7c, 0x8d, 0x98, 0x87, 0x53, 0xf4, 0x2d, 0xd4, 0x5b, 0x19, 0x5b,
	0xc1, 0x8c, 0xcf, 0x1f, 0xef, 0xd3, 0x78, 0xc6, 0xc6, 0xf1, 0x8c, 0x65, 0xb4, 0x34, 0x76, 0xea,
	0x83, 0x7b, 0xb7, 0xfe, 0xf5, 0x8f, 0xad, 0xda, 0x6f, 0x5f, 0x6f, 0xd5, 0x7e, 0xff, 0x7a, 0xab,
	0xf6, 0xc7, 0xd7, 0x5b, 0xb5, 0xb3, 0xa6, 0xf9, 0x63, 0xf0, 0xf1, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xc3, 0x2d, 0xed, 0xde, 0x7a, 0x14, 0x00, 0x00,
}
